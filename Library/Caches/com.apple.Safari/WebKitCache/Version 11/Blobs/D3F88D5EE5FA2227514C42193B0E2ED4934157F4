(function () {
    function GetQuerystringParameter(name) {
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var tmpURL = window.location.href;
        var results = regex.exec(tmpURL);
        if (results == null)
            return "";
        else
            return decodeURIComponent(results[1]);
    }
    function ParseJsonDate(input) {
        var fullDate = new Date(parseInt(input.substr(6)));
        var twoDigitMonth = (fullDate.getMonth() + 1) + ""; if (twoDigitMonth.length == 1) twoDigitMonth = "0" + twoDigitMonth;

        var twoDigitDate = fullDate.getDate() + ""; if (twoDigitDate.length == 1) twoDigitDate = "0" + twoDigitDate;
        var currentDate = twoDigitMonth + "/" + twoDigitDate + "/" + fullDate.getFullYear();

        return currentDate;
    }
    function DOMReady(f) {
        if (/in/.test(document.readyState)) {
            setTimeout(function () { DOMReady(f); }, 9);
        } else {
            f.apply(this);
        }
    }
    function ArrayContains(arr, needle) {
        if (arr) {
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == needle) {
                    return true;
                }
            }
        }
        return false;
    }
    function InsertAfter(target, newNode) {
        if (target.nextSibling) {
            target.parentNode.insertBefore(newNode, target.nextSibling);
        } else {
            target.parentNode.appendChild(newNode);
        }
    }

    function DlvFormHandler(form) {
        this.form = form;
        this.formValidators = [];
        this.initialize = function () {
            var that = this;
            if (typeof this.form.getElementsByName === 'undefined') {
                this.form.getElementsByName = function (name) {
                    var selector = '[name="' + name.replace(/"/g, '\\"') + '"]';
                    return this.querySelectorAll(selector);
                };
            }
            if (typeof this.form.getElementsByClassName === 'undefined') {
                this.form.getElementsByClassName = function (names) {
                    var selector = '.' + names.replace(/^\s+/, '').replace(/\s+$/, '').replace(/\s+/g, '.');
                    return this.querySelectorAll(selector);
                };
            }
            this.AddValidation();
            this.GetFormData();

            var recaptcha = this.form.getElementsByClassName("g-recaptcha")[0];
            if (recaptcha) {
                this.AddValidator(recaptcha, 'Please check the recaptcha', this.ValidateRequired);
            }
            this.ScaleReCaptcha();
            if (window.addEventListener) {
                window.addEventListener("resize", function () { that.ScaleReCaptcha(); });
            } else if (window.attachEvent) {
                window.attachEvent("resize", function () { that.ScaleReCaptcha(); });
            }
        };
        this.GetFormFields = function () {
            var inputs = this.form.querySelectorAll('input, select');
            var fields = [];
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.name && !ArrayContains(fields, input.name)) {
                    fields.push(input.name);
                }
            }
            return fields;
        };
        this.GetFormAccounts = function () {
            var inputs = this.form.querySelectorAll('input[name="list"]');
            var accounts = [];
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.value && !ArrayContains(accounts, input.value)) {
                    accounts.push(input.value);
                }
            }
            return accounts;
        };
        this.GetFormCategories = function () {
            var inputs = this.form.querySelectorAll('input[name="category"]');
            var categories = [];
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.value && !ArrayContains(categories, input.value)) {
                    categories.push(input.value);
                }
            }
            return categories;
        };
        this.GetFormData = function () {
            var that = this;
            var WebFormID = this.form.querySelector('#DlvWebFormID').value;
            var ListID = this.form.querySelector('#DlvListID').value;
            var MemberGuid = GetQuerystringParameter('m');
            var UnsubMailID = GetQuerystringParameter('mailid');
            var SMSKeyword = "";
            if (this.form.getElementsByName('SMSKeyword')[0] != undefined) {
                SMSKeyword = this.form.getElementsByName('SMSKeyword')[0].value;
            }

            var req = new XMLHttpRequest();
            if (req.addEventListener) {
                req.addEventListener("load", function () {
                    that.SetFormData(JSON.parse(req.responseText));
                });
            } else {
                req.onreadystatechange = function () {
                    if (req.readyState == 4) {
                        that.SetFormData(JSON.parse(req.responseText));
                    }
                };
            }

            var categoriesJSON = JSON.stringify(this.GetFormCategories());

            var params = [];
            params.push("p=" + encodeURIComponent(WebFormID));
            params.push("l=" + encodeURIComponent(ListID));
            params.push("m=" + encodeURIComponent(MemberGuid));
            params.push("mailid=" + encodeURIComponent(UnsubMailID));
            params.push("c=" + encodeURIComponent(categoriesJSON));
            params.push("d=" + encodeURIComponent(JSON.stringify(this.GetFormFields())));
            params.push("a=" + encodeURIComponent(JSON.stringify(this.GetFormAccounts())));
            params.push("keyword=" + encodeURIComponent(SMSKeyword));

            var action = this.form.action;
            var endPoint = action.replace(/subscribe.ashx.*/gi, "SubscribeData.ashx");
            req.open("GET", endPoint + "?" + params.join('&'), true);
            req.send();

            var catInputs = this.form.querySelectorAll('input[name="categories"]');
            if (catInputs.length > 0) {
                catInputs[0].value = categoriesJSON;
            } else {
                var newInput = document.createElement('input');
                newInput.type = "hidden";
                newInput.name = "categories";
                newInput.value = categoriesJSON
                this.form.appendChild(newInput);
            }

            var mailID = document.createElement('input');
            mailID.type = "hidden";
            mailID.name = "mailid";
            mailID.value = UnsubMailID
            this.form.appendChild(mailID);

            var pID = document.createElement('input');
            pID.type = "hidden";
            pID.name = "p";
            pID.value = WebFormID
            this.form.appendChild(pID);

            var mID = document.createElement('input');
            mID.type = "hidden";
            mID.name = "m";
            mID.value = MemberGuid
            this.form.appendChild(mID);

            var keyword = document.createElement('input');
            keyword.type = "hidden";
            keyword.name = "keyword";
            keyword.value = SMSKeyword
            this.form.appendChild(keyword);
        };
        this.SetFormData = function (data) {
            var inputs = this.form.querySelectorAll('input, select');
            var authValDone = false;
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                var name = (input.name || '').toLowerCase();
                if (data.demographics && name in data.demographics) {
                    if (input.type == 'radio' || input.type == 'checkbox') {
                        input.checked = (input.value.toString().toLowerCase() == data.demographics[name].toString());
                    } else if (input.type == 'select-one') {
                        if (name in data.typeinfo && data.typeinfo[name].type == 'Decimal') {
                            if (!input.value) {
                                input.querySelector("option[value^='" + data.demographics[name] + "']").selected = true;
                            }
                        } else {
                            input.value = input.value || data.demographics[name];
                        }
                    } else {
                        if (name in data.typeinfo && data.typeinfo[name].type == 'DateTime') {
                            if (data.demographics[name] != null) {
                                var date = ParseJsonDate(data.demographics[name]);
                                input.value = input.value || date;
                            }
                        } else {
                            input.value = input.value || data.demographics[name];
                        }
                    }
                }
                if (input.tagName.toLowerCase() == 'input' && input.type.toLowerCase() != 'radio') {
                    if (name in data.typeinfo) {
                        var info = data.typeinfo[name];
                        switch (info.type) {
                            case "DateTime":
                                this.AddValidator(input, 'needs to be a real date', this.ValidateDate);
                                break;
                            case "Int32":
                                this.AddValidator(input, 'needs to be a real number', this.ValidateNumeric);
                                this.AddValidator(input, 'needs to be a number between ' + (-Math.pow(2, 31)).toString() + ' and ' + (Math.pow(2, 31) - 1).toString(), this.ValidateInt32);
                                input.maxLength = 11;
                                break;
                            case "Int16":
                                this.AddValidator(input, 'needs to be a real number', this.ValidateNumeric);
                                this.AddValidator(input, 'needs to be a number between ' + (-Math.pow(2, 15)).toString() + ' and ' + (Math.pow(2, 15) - 1).toString(), this.ValidateInt16);
                                input.maxLength = 6;
                                break;
                            case "Decimal":
                                this.AddValidator(input, 'needs to be a decimal between -9999999999.999999999 and 9999999999.999999999', this.ValidateDecimal);
                                break;
                            case "String":
                                if (name.toLowerCase() == 'email' || name.toLowerCase() == 'emailaddr_') {
                                    this.AddValidator(input, 'needs to be a valid email address', this.ValidateEmail);
                                }
                                input.maxLength = info.maxlength;
                                break;
                        }
                    }
                }

                if (name.toLowerCase() == 'smsmobilephone') {
                    this.AddValidator(input, 'needs to be a valid phone number', this.ValidatePhone);
                    input.maxLength = 15;
                }

                if (name.toLowerCase() == 'smsauthorize') {
                    if (!authValDone) {
                        authValDone = true;
                        this.AddValidator(input, 'field is required when phone number is entered', this.ValidateAuthorize);
                    }
                }

                if (name.toLowerCase() == 'emailauthorize') {
                    if (!authValDone) {
                        authValDone = true;
                        this.AddValidator(input, 'field is required when email address is entered', this.ValidateEmailAuthorize);
                    }
                }

                if (input.hasAttribute('required')) {
                    this.AddValidator(input, 'field is required', this.ValidateRequired);
                }
            }

            var categories = this.form.querySelectorAll('input[name="category"]');
            for (var i = 0; i < categories.length; i++) {
                var cat = categories[i];
                if (cat.value && ArrayContains(data.categories, cat.value)) {
                    cat.checked = true;
                }
            }
            var lists = this.form.querySelectorAll('input[name="list"]');
            for (var i = 0; i < lists.length; i++) {
                var list = lists[i];
                if (data.lists && list.value && list.value in data.lists && data.lists[list.value] == 'normal') {
                    list.checked = true;
                }
            }
        };
        this.AddValidation = function () {
            var that = this;
            var buttons = this.form.querySelectorAll('button.editor-email-button');
            for (var i = 0; i < buttons.length; i++) {
                var button = buttons[i];
                button.onclick = function () { return that.DoValidation() };
            }
        };
        this.DoValidation = function () {
            var result = true;
            for (var i = 0; i < this.formValidators.length; i++) {
                result = this.formValidators[i]() && result;
            }
            return result;
        };
        this.AddValidator = function (controlToValidate, errorMessage, validationFunction) {
            var that = this;

            var targetLabel = document.createElement('div');
            targetLabel.style.display = 'none';
            targetLabel.style.color = 'red';
            targetLabel.innerHTML = errorMessage;

            if (/\bg-recaptcha\b/.test(controlToValidate.className)) {
                targetLabel = document.createElement('tr');
                var targetRowContent = document.createElement('td');
                targetRowContent.innerHTML = "<div style=''>Please check the recaptcha</div>"
                targetLabel.style.color = 'red';
                targetLabel.style.display = 'none';
                targetLabel.appendChild(targetRowContent);

                var pNode = controlToValidate.parentNode
                controlToValidate.parentNode.parentNode.parentNode.insertBefore(targetLabel, controlToValidate.parentNode.parentNode.nextSibling);

                //InsertAfter(controlToValidate, targetRow);
                controlToValidate = controlToValidate.querySelector('textarea');
            } else if (controlToValidate.type == 'radio') {
                var radios = this.form.getElementsByName(controlToValidate.name);
                var lastRadio = radios[radios.length - 1];
                if (lastRadio.parentNode.tagName.toLowerCase() == 'label') {
                    InsertAfter(lastRadio.parentNode, targetLabel);
                } else {
                    InsertAfter(lastRadio, targetLabel);
                }
            } else if (controlToValidate.type == 'checkbox') {
                var container = controlToValidate.parentNode;
                InsertAfter(container, targetLabel);
            } else {
                InsertAfter(controlToValidate, targetLabel);
            }

            var validatorCallback = function () {
                try {
                    if (!validationFunction.call(that, controlToValidate)) {
                        targetLabel.style.display = '';
                        return false;
                    } else {
                        targetLabel.style.display = 'none';
                        return true;
                    }
                } catch (err) {
                    targetLabel.style.display = 'none';
                    return true;
                }
            };

            this.formValidators.push(validatorCallback);

            if (controlToValidate.addEventListener) {
                controlToValidate.addEventListener('change', validatorCallback);
            } else if (controlToValidate.attachEvent) {
                controlToValidate.attachEvent('onchange', validatorCallback);
            }
        };
        this.ValidateEmail = function (controlToValidate) {
            var phoneInput = this.form.getElementsByName('SMSMobilePhone')[0];
            if (phoneInput && phoneInput.value.length > 0) {
                return true;
            }

            var reEmail = new RegExp("^[a-zA-Z0-9!#$%&'*+-/=\?^_`\\{\\|\\}~]+@[A-Za-z0-9-]+\\.[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*$");
            return reEmail.test(controlToValidate.value);
        };
        this.ValidatePhone = function (controlToValidate) {
            var countryCodeField = this.form.getElementsByName('SMSCountry');
            var countryCode = "1";
            if (countryCodeField && countryCodeField.length > 0) {
                countryCode = countryCodeField[0].value;
            }

            var emailInput = this.form.getElementsByName('emailaddr_')[0];
            var phoneInput = controlToValidate.value;
            phoneInput = phoneInput = phoneInput.replace(/\D/g, "");

            if (!countryCode || countryCode === "1") {
                //expect North American phone number
                if ((phoneInput.length !== 10 && phoneInput.length > 0) ||
                    (emailInput == undefined && phoneInput.length !== 10)) {
                    return false;
                }

                if (controlToValidate.value.length > 0) {
                    var phoneRe = new RegExp("^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$");

                    var testBool = phoneRe.test(controlToValidate.value);
                    this.form.getElementsByName('SMSMobilePhone')[0].value = phoneInput;
                    return testBool;
                } else {
                    return true;
                }
            } else {
                //expect international phone number
                if ((phoneInput.length < 6 && phoneInput.length > 0) ||
                    (emailInput == undefined && phoneInput.length < 6)) {
                    return false;
                } else {
                    return true;
                }
            }
        };
        this.ValidateDate = function (controlToValidate) {
            if (controlToValidate.value.length == 0 || controlToValidate.value === 'sysdate') {
                return true;
            }
            var date = new Date(controlToValidate.value);
            if (isNaN(date)) {
                return false;
            }
            if (date.getFullYear() < 1901) {
                return false;
            }
            if (date.getFullYear() > 2099) {
                return false;
            }
            return true;
        };
        this.ValidateDecimal = function (controlToValidate) {
            var reInt = new RegExp("^-?[0-9]{0,10}(\\.[0-9]{0,9})?$");
            var textVal = reInt.test(controlToValidate.value);
            var badType = false;
            if (controlToValidate < -9999999999.999999999 || controlToValidate > 9999999999.999999999) {
                badType = true;
            }

            return (!badType && textVal);
        };
        this.ValidateNumeric = function (controlToValidate) {
            var reInt = new RegExp("^-?\\d*$");
            return reInt.test(controlToValidate.value);
        };
        this.ValidateInt16 = function (controlToValidate) {
            if (controlToValidate.value.length == 0) {
                return true;
            }
            var val = parseInt(controlToValidate.value);
            return !(val < -Math.pow(2, 15)) && !(val > Math.pow(2, 15) - 1);
        };
        this.ValidateInt32 = function (controlToValidate) {
            if (controlToValidate.value.length == 0) {
                return true;
            }
            var val = parseInt(controlToValidate.value);
            return !(val < -Math.pow(2, 31)) && !(val > Math.pow(2, 31) - 1);
        };
        this.ValidateAuthorize = function (controlToValidate) {
            if (controlToValidate.type.toLowerCase() == 'radio') {
                var radios = this.form.getElementsByName(controlToValidate.name);
                for (var i = 0; i < radios.length; i++) {
                    if (radios[i].checked && radios[i].value.length > 0) {
                        return true;
                    }
                }
                var phoneInput = this.form.getElementsByName('SMSMobilePhone')[0].value;
                if (phoneInput.length > 0) {
                    return false;
                }
                return true;
            } else if (controlToValidate.type.toLowerCase() == 'checkbox') {
                var phoneInput = this.form.getElementsByName('SMSMobilePhone')[0].value;
                if (phoneInput.length > 0) {
                    return controlToValidate.checked;
                }
                return true;
            } else {
                var phoneInput = this.form.getElementsByName('SMSMobilePhone')[0].value;
                if (phoneInput.length > 0) {
                    return controlToValidate.value.length > 0;
                }
                return true;
            }
        };
        this.ValidateEmailAuthorize = function (controlToValidate) {
            var emailInput = this.form.getElementsByName('emailaddr_')[0].value;
            if (emailInput.length > 0) {
                return controlToValidate.checked;
            }
            return true;
        };
        this.ValidateRequired = function (controlToValidate) {
            if (controlToValidate.type.toLowerCase() == 'radio') {
                var radios = this.form.getElementsByName(controlToValidate.name);
                for (var i = 0; i < radios.length; i++) {
                    if (radios[i].checked && radios[i].value.length > 0) {
                        return true;
                    }
                }
                return false;
            } else if (controlToValidate.type.toLowerCase() == 'checkbox') {
                return controlToValidate.checked;
            }
            else {
                return controlToValidate.value.length > 0;
            }
        };
        this.ScaleReCaptcha = function () {
            var captchas = this.form.getElementsByClassName('g-recaptcha');
            for (var i = 0; i < captchas.length; i++) {
                //padding is calculated as part of the child
                var recaptcha = captchas[i];
                var td = recaptcha.parentNode.parentNode;

                var paddingLeft = parseInt(td.style.paddingLeft) || 0;
                var paddingRight = parseInt(td.style.paddingRight) || 0;

                var childWidth = recaptcha.firstChild.clientWidth;
                var childHeight = recaptcha.firstChild.clientHeight;
                var scale = td.clientWidth / (childWidth + paddingLeft + paddingRight);

                recaptcha.style.transform = 'scale(' + scale + ')';
                recaptcha.style.transformOrigin = '0 0';

                td.style.verticalAlign = 'top';
                td.style.height = (childHeight * scale).toString() + 'px';

            }
        };
    }

    DOMReady(function () {
        var forms = document.querySelectorAll('form.editor-dragndrop-form');
        for (var i = 0; i < forms.length; i++) {
            var dlvForm = new DlvFormHandler(forms[i]);
            dlvForm.initialize();
        }
    });
})();