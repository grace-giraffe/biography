/*global window, $, document*/

//** shim for trim - CONNECT issue with popups in IE9 **//
if (!String.prototype.trim) {
	(function () {
		var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
		String.prototype.trim = function () {
			return this.replace(rtrim, '');
		};
	}());
}
//** end shim **//

var googleAnalytics = this.googleAnalytics || {},
    generic = this.generic || {},
    dataLayer = [];

generic.utils = (function () {
	'use strict';
	return {
		getCookies: function () {
			return document.cookie;
		},
		getCookieValue: function (key) {
			var cookieString, cookies, index, pair;
			key += '=';
			cookieString = this.getCookies();
			cookies = cookieString.split(/;\s*/);
			for (index = 0; index < cookies.length; index += 1) {
				pair = cookies[index];
				if (pair.indexOf(key) === 0) {
					return pair.substring(key.length);
				}
			}
			return '';
		},
		setCookie: function (newCookie) {
			document.cookie = newCookie;
		},
		getHostname: function () {
			return window.location.hostname;
		},
		getDomain: function () {
			var hostname, tokens;
			hostname = this.getHostname();
			tokens = hostname.split('.');
			if (tokens.length < 3) {
				return '.' + hostname;
			}
			return '.' + tokens[tokens.length - 2] + '.' + tokens[tokens.length - 1];
		},
		getCurrentDate: function () {
			return new Date();
		},
		buildCookie: function (name, value, maxAgeInSeconds, path, domain) {
			var cookie, expires, currentDate;
			path = path || '/';
			domain = domain || this.getDomain();
			cookie = name + '=' + value + ';path=' + path + ';domain=' + domain;
			if (maxAgeInSeconds !== undefined) {
				currentDate = this.getCurrentDate();
				currentDate.setUTCSeconds(currentDate.getUTCSeconds() + maxAgeInSeconds);
				expires = currentDate.toUTCString();
				cookie += ';max-age=' + maxAgeInSeconds + ';expires=' + expires;
			}
			return cookie;
		},
		removeEmptyProperties: function (dataObject) {
			var key;
			for (key in dataObject) {
				if (dataObject.hasOwnProperty(key)) {
					if (dataObject[key] === '') {
						delete dataObject[key];
					}
				}
			}
		}
	};
}());

googleAnalytics.constants = (function () {
	'use strict';
	return {
		arrayDelimChar: '&',
		namValDelimChar: ': ',
		eventTimeoutPeriod: 2000,
		googleSessionCookie: { name: 'GoogleSessionAlive', value: 'Y', maxAgeInMinutes: 30 },
		maskedMsgText: 'message masked due to potential PII issue',
		gaEventActions: {
			boxCheck: 'BoxCheck',
			buttonClick: 'ButtonClick',
			dropdownChange: 'DropdownChange',
			imageClick: 'ImageClick',
			linkClick: 'LinkClick',
			radioButtonChange: 'RadioButtonChange',
			reviewBeforeSubmitSelections: 'ReviewBeforeSubmitSelections',
			sysEvent: 'SysEvent',
			textBoxFocus: 'TextBoxFocus',
            userInputFinalSelections: 'UserInputFinalSelections',
            display: 'Display'
		},
		eventZones: {
			action: 'Action',
			counselMessage: 'Counsel Message',
			footer: 'Footer',
			faqZone: 'Common Questions',
			globalMessage: 'Global Message',
			header: 'Header',
			interaction: 'Interaction',
			leftNav: 'Left Navigation',
			localMessage: 'Local Message',
			tools: 'Tools'
		}
	};
}());

googleAnalytics.utils = (function (gac, utils) {
	'use strict';

	var elements = {
		a: getLinkEventLabel,
		select: getInputEventLabel,
		checkbox: getCheckBoxEventLabel,
		text: getInputEventLabel,
		radio: getRadioButtonEventLabel,
		img: getImageLabel,
		email: getInputEventLabel,
		password: getInputEventLabel,
		textarea: getInputEventLabel
	};

	function getLinkEventLabel($link) {
		var $linkImages = $link.children('img'),
            linkText = $linkImages.length > 0 ? $linkImages.attr('title') : $link.text(),
            maskText = $link.data('personal-id-info') || $link.data('analytics-handler');

		if ($link.parent().is('span')) {
			maskText = $link.parent().data('personal-id-info') || maskText;
		}

		return formatAndMaskText(linkText, maskText);
	}

	function getInputEventLabel($input) {
		var inputId = $input.attr('id'),
            inputInsideRadioLabel = $input.parent().is('label') && $input.siblings('[type="radio"]').length > 0,
            tildeParts,
            fieldName,
            idIndexParts,
            $inputLabel,
            maskText,
            labelText,
            removeHelpLink;

		if (inputId) {
			tildeParts = inputId.split('~');
			fieldName = tildeParts.length <= 2 ? tildeParts[0] : tildeParts[2];

			if (inputInsideRadioLabel) {
				labelText = getRadioButtonEventLabel($input.siblings('[type="radio"]'));
			} else {
				$inputLabel = $('label[for="' + fieldName + '"]');
				if ($inputLabel.text().length === 0) {
					idIndexParts = inputId.split('.');
					$inputLabel = $('label[for="' + idIndexParts[0] + '"]');
				}

				maskText = $inputLabel.data('personal-id-info') || $inputLabel.data('analytics-handler');
				removeHelpLink = $inputLabel.find('a[class="help"]').length > 0;
				labelText = formatAndMaskText($inputLabel.text(), maskText, removeHelpLink);
			}
		}

		return labelText;
	}

	function getCheckBoxEventLabel($checkBox) {
		var checkBoxId = $checkBox.attr('id'),
            maskText = $checkBox.data('personal-id-info') || $checkBox.data('analytics-handler');

		return formatAndMaskText($('label[for="' + checkBoxId + '"]').text(), maskText);
	}

	function getRadioButtonEventLabel($radioButton) {
		var radioId = $radioButton.attr('id'),
            radioCategory = getCategoryForRadio($radioButton),
            maskText = $radioButton.data('personal-id-info') || $radioButton.data('analytics-handler'),
            radioLabel = formatAndMaskText($('label[for="' + radioId + '"]').text(), maskText) || 'Label not found';

		return radioCategory + gac.arrayDelimChar + radioLabel;
	}

	function getCategoryForRadio($radio) {

		var categoryId = $radio.attr('name'),
            tildeParts = categoryId.split('~'),
            fieldName = tildeParts.length <= 2 ? tildeParts[0] : tildeParts[2],
            $categoryElement = $('label[for="' + fieldName + '"]'),
            maskText = $categoryElement.data('personal-id-info') || $categoryElement.data('analytics-handler'),
            removeHelpLink = $categoryElement.find('a[class="help"]').length > 0,
            category = $categoryElement.text();

		return formatAndMaskText(category, maskText, removeHelpLink) || 'Category not found';
	}


	function getImageLabel($image) {
		var imageText = $image.attr('title'),
            maskText = $image.data('personal-id-info') || $image.data('analytics-handler');

		return formatAndMaskText(imageText, maskText);
	}

	function formatAndMaskText(text, mask, removeHelpLink) {
		var dollarValues = /([$][0-9]{0,3}(?:,?)[0-9]{0,3}\.[0-9]{2})/g,
            dates = /\d{2}\/\d{2}\/\d{4}/g,
            ampersands = /\s&\s/g,
            progPolicyNumbers = /[0-9]{8}-[0-9]{1}|[0-9]{8,9}/g,
            policyNumberOnly = /^\d{8,9}(-\d)?$/,
            specialChars = /[.:]$/,
            emailAddresses = /[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}/g,
            phoneNumbers = /(([0-9]{1}-)?(\([0-9]{3}\)|[0-9]{3}-)[0-9]{3}-[0-9]{4})|[0-9]{3}-[0-9]{4}/g,
            result = mask || '';


		if (text && !mask) {
			if (removeHelpLink) {
				text = text.trim().replace(/help$/, '');
			}

			result = text.trim()
                        .replace(policyNumberOnly, 'Policy Number')
                        .replace(progPolicyNumbers, 'MaskedPolicyNbr')
                        .replace(dollarValues, '$###.##')
                        .replace(dates, 'MMDDYYYY')
                        .replace(ampersands, ' and ')
                        .replace(specialChars, '')
                        .replace(emailAddresses, '@email address')
                        .replace(phoneNumbers, '555-555-5555');
		}

		return result;
	}

	return {
		checkGoogleSessionCookie: function () {
			var isSessionAlive = utils.getCookieValue(gac.googleSessionCookie.name),
                multiPolInd = googleAnalytics.data.pageData.multiPolInd;

			if (isSessionAlive === '' && !multiPolInd) {
				dataLayer.push({ 'multiPolInd': 'Not Available' });
			}
		},
		setGoogleSessionCookie: function () {
			var cookie = gac.googleSessionCookie;
			utils.setCookie(utils.buildCookie(cookie.name, cookie.value, cookie.maxAgeInMinutes * 60, utils.getCurrentDate()));
		},
		formatZoneForCustomDimension: function ($zone, dataForDisplay) {
			var value,
                count,
                data,
                visible = ($zone.is(':visible') && !$zone.is(':empty')) ? 'Y' : 'N';

			if ($.isArray(dataForDisplay)) {
				count = dataForDisplay.length;
				data = dataForDisplay.join(gac.arrayDelimChar);
				value = visible.concat(gac.arrayDelimChar, count, gac.arrayDelimChar, data);
			} else {

				value = visible.concat(gac.arrayDelimChar, dataForDisplay);
			}

			return value;
		},
		formatArrayForCustomDimension: function (array) {
			array.unshift(array.length);
			return array.join(gac.arrayDelimChar);
		},
		formatCurrency: function (number) {
			var currencyArray = number.split('.'),
                cents;
			if (currencyArray.length === 1) {
				currencyArray.push('00');
			} else {
				cents = currencyArray[1] + "0";
				currencyArray[1] = cents.substring(0, 2);
			}
			return currencyArray.join('.');
		},
		shouldInitUBICustomDimensions: function () {
			if ($('*[data-analytics-handler="UBI30"]').length === 1 || $('*[data-analytics-handler="UBI30MainConsole"]').length === 1 || $('*[data-analytics-handler="UBI30Renewal"]').length === 1) {
				return true;
			}
			return false;
		},
		shouldInitFinalSelections: function () {
			if (googleAnalytics.data.finalSelectionData !== undefined &&
                    googleAnalytics.data.finalSelectionData.txStatus === 'SUBMITTED') {
				var pageName = googleAnalytics.data.pageData.pageTechName || '';

				if (pageName.toLowerCase().match('confirmation') || ($('*[data-analytics-handler="UserInputFinalSelections"]').length === 1)) { return true; }
			}

			return false;
		},
		shouldInitReviewBeforeSubmitSelections: function () {
			if (googleAnalytics.data.finalSelectionData !== undefined) {

				if ($('*[data-analytics-handler="ReviewBeforeSubmitSelections"]').length === 1) {
					return true;
				}
			}

			return false;
		},
		shouldCollectPageData: function () {

			if ($('*[data-analytics-handler="CollectPageData"]').length === 1) {
				return true;
			}
			return false;
		},
		shouldLogMoosAB: function () {
			return $('*[data-analytics-handler="MoosAB"]').length === 1; {
				return true;
			}
			return false;
		},
		shouldLogMoosSnapshotData: function () {
			if ($('*[data-analytics-handler="MoosSnapshot"]').length === 1) {
				return true;
			}
			return false;
		},
		formatLabelForFinalSelections: function (selectionLabels, selectionValues) {
			var label = 'txName: ' + googleAnalytics.data.pageData.txName,
                count;
			for (count = 0; count < selectionLabels.length; count += 1) {
				label = label.concat(gac.arrayDelimChar, selectionLabels[count], ': ', selectionValues[count]);
			}
			return label;
		},
		formatLabelForFinalSelectionsByDataAnalyticsHandler: function ($dataAnalyticsHandler) {
			var analyticsHandlertxName = 'txName',
                fsd = googleAnalytics.data.finalSelectionData,
                label = fsd.totalChargedPremiumLabel + gac.namValDelimChar + this.formatCurrency(fsd.totalChargedPremium) + gac.arrayDelimChar + fsd.totalLatestChargedIncreaseDecreaseLabel + gac.namValDelimChar + fsd.totalLatestChargedIncreaseDecrease,
                isUpdateTransaction = false;

			$.each($dataAnalyticsHandler, function (index) {

				var analyticsHandlerRecapSelection = 'recap selection',
                    recapLabel,
                    recapSelection,
                    recapTranName,
                    analyticsHandlerValue = $(this).data('analytics-handler');

				if (analyticsHandlerValue.match(analyticsHandlertxName)) {
					recapTranName = analyticsHandlerValue.split(':')[1];

					isUpdateTransaction = analyticsHandlerValue.match('UpdateDriverInformation|UpdateVehicleInformation|CoverageChange|AddressChange') ? true : false;

					label = label.concat(gac.arrayDelimChar, analyticsHandlertxName, gac.namValDelimChar, recapTranName);

				} else if (analyticsHandlerValue.match(analyticsHandlerRecapSelection)) {

					if (analyticsHandlerValue.split(' ')[2]) {
						recapLabel = analyticsHandlerValue.split(' ')[2];
						recapSelection = $(this).data('personal-id-info') || googleAnalytics.utils.formatAndMaskText($(this).children(':first-child').text());
						label = label.concat(gac.arrayDelimChar, recapLabel, gac.namValDelimChar, recapSelection);
					} else {
						recapLabel = googleAnalytics.utils.formatAndMaskText($(this).children(':first-child').text());
						recapSelection = $(this).data('personal-id-info') || googleAnalytics.utils.formatAndMaskText($(this).children(':last-child').text());
					}

					if (($(this).children(':has(.changedInfo)').length > 0) || !isUpdateTransaction) {
						label = label.concat(gac.arrayDelimChar, recapLabel, gac.namValDelimChar, recapSelection);
					}
				}
			});

			if (!label.match(analyticsHandlertxName)) {
				label = label.concat(gac.arrayDelimChar, analyticsHandlertxName, gac.namValDelimChar, googleAnalytics.data.pageData.txName);
			}

			return label;
		},
		getEventLabel: function ($element) {
			var label,
                elementType = $element.is('input') ? $element.attr('type') : $element.prop('nodeName').toLowerCase();

			if (elements[elementType] !== undefined) {
				label = elements[elementType]($element);
			}

			return label || 'Label not found';
		},
		updateCSPPolicyDimensions: function ($link) {
			var policyIndex = $link.closest('div.policy_summary').data('policy-index'),
                policyObject = typeof (cspJSON) !== 'undefined' ? cspJSON.Customer.Policies[policyIndex] : undefined,
                policyDimensions;

			if (policyObject) {
				policyDimensions = {
					polNbr: policyObject.PolicyNumber,
					policyStatus: policyObject.PolicyStatus,
					state: policyObject.StateCode,
					prodCode: policyObject.ProdCode,
					channel: policyObject.ChannelIndicator,
					riskType: policyObject.RiskType,
					customerRoleCode: policyObject.CustRelationshipCode,
					loyaltyLevel: policyObject.LoyaltyLevel,
					affiliateCode: policyObject.AffiliateCode,
					phaPartner: policyObject.IsPHAPolicy === 'Y' ? policyObject.PHAPartnerName : 'Not Available'
				}
				dataLayer.push(policyDimensions);
			}
		},
		getCategoryForRadio: getCategoryForRadio,
		formatAndMaskText: formatAndMaskText
	};
}(googleAnalytics.constants, generic.utils));

googleAnalytics.data = googleAnalytics.data || {};

(function (gad, utils) {
	'use strict';
	gad.pageData = gad.pageData || {};
	gad.pageData.sourceSystem = 'PolicyPro';
	gad.pageData.siteServerSessionID = utils.getCookieValue('SITESERVER').replace('ID=', '');
	gad.pageData.sourceSessionID = (gad.pageData.sourceSessionID !== undefined) ? gad.pageData.sourceSessionID.replace(/[{}]/g, '') : '';
	gad.pageData.domain = utils.getDomain();
	utils.removeEmptyProperties(gad.pageData);
	dataLayer.push(googleAnalytics.data.pageData);

}(googleAnalytics.data, generic.utils));


googleAnalytics.core = (function (gad, gac, gau) {
	'use strict';
	function logEvent(action, label, value, customDimensions) {
		var gaObject = {}, clearObject = {}, customDim;
		if (action === undefined || label === undefined) {
			return;
		}

		gaObject.event = 'GAEvent';
		gaObject.eventCategory = 'Servicing';
		gaObject.eventAction = action;
		gaObject.eventLabel = label;

		if (value !== undefined && value !== null) {
			gaObject.eventValue = value;
		}
		if (customDimensions !== undefined) {
			for (customDim in customDimensions) {
				if (customDimensions.hasOwnProperty(customDim)) {
					gaObject[customDim] = customDimensions[customDim];
					clearObject[customDim] = '';
				}
			}
		}

		if (dataLayer !== undefined) {
			dataLayer.push(gaObject);
			dataLayer.push(clearObject);
		}

		gau.checkGoogleSessionCookie();
		gau.setGoogleSessionCookie();
	}

	return {
		defectionMgmntCustonDimensions: function () {
			if (gad.pageData.isUserExcludedFromStopEFTFlow === 'Y') { return 'Not eligible'; }
			if (gad.pageData.isIncludedInStopEFTControlGroup === 'Y') { return 'Eligible and control'; }
			return 'Eligible and treatment';
		},
		ubiCustomDimensions: function ($dataAnalyticsHandler) {
			var badgeDisplayArray = [],
                badgeArray = [],
                snapshotGradeArray = [],
                snapshotStatusArray = [gad.pageData.ubiEnrolled],
                $ubiImages = $dataAnalyticsHandler.find('img'),
                badgeDisplay,
                badgeDisposition = 'BN',
                $snapshotMessages = $dataAnalyticsHandler.find('span[id]'),
                snapshotMessagesIDArray,
                snapshotMessagesArray,
                rateChange,
                verExp = [],
                exp,
                vehDiscSrchgAmt = [],
                vehArray = [],
                vehIdx = [],
                vehCount,
                vehStatus = [];



			if ($dataAnalyticsHandler.data('analytics-handler') == "UBI30MainConsole" || $dataAnalyticsHandler.data('analytics-handler') == "UBI30Renewal") {
				badgeArray = $('#console :visible').find('img');
				badgeDisplay = (badgeArray.length > 0) ? 'Y' : 'N';
				if ($ubiImages.length > 0) {
					snapshotGradeArray = $.map($ubiImages, function (img) {
						if (img.title.indexOf("Snapshot Status:") != -1) {
							var indexStart = img.title.indexOf(":") + 2,
                                indexEnd = img.title.indexOf(",");
							return img.title.substring(indexStart, indexEnd);
						}
					});
				}
				snapshotMessagesIDArray = $.map($snapshotMessages, function (message) { return $(message).attr('id'); });
				snapshotMessagesArray = gau.formatZoneForCustomDimension($dataAnalyticsHandler, snapshotMessagesIDArray);
				dataLayer.push({ snapshotMessage: snapshotMessagesArray });

				vehCount = $('#console .ubi_results').length;
				$('#console h3>a[id*="tripDetailsLog."]').each(function () { vehIdx.push(parseInt(this.id.split(".")[1])); });

				for (var i = 0; i < vehCount; i++) {
					var idx = vehIdx[i] - 1;
					exp = '-P';
					if (gad.pageData.ubiDeviceExperienceType[idx] == "Mobile") {
						exp = '-M';
					}
					verExp.push(gad.pageData.ubiVehicleVersion[idx] + exp);

					vehStatus.push(gad.pageData.ubiVehicleStatus[idx]);

					if (gad.pageData.ubiDiscSrchgAmtRenewal[idx]) {
						vehDiscSrchgAmt.push((gad.pageData.ubiSrchgIndRenewal[idx] == 'Y' && gad.pageData.ubiDiscSrchgAmtRenewal[idx] > 0) ? '-' + gad.pageData.ubiDiscSrchgAmtRenewal[idx] : gad.pageData.ubiDiscSrchgAmtRenewal[idx]);
					}
					else {
						vehDiscSrchgAmt.push((gad.pageData.ubiSrchgInd[idx] == 'Y' && gad.pageData.ubiDiscSrchgAmt[idx] > 0) ? '-' + gad.pageData.ubiDiscSrchgAmt[idx] : gad.pageData.ubiDiscSrchgAmt[idx]);
					}
				}

			}
			if (badgeDisplay == 'Y') badgeDisposition = 'BY';
			if (snapshotGradeArray.length < 1) {
				dataLayer.push({ snapshotGrade: "Not Available" });
			}
			else {
				dataLayer.push({ snapshotGrade: (badgeDisplay + gac.arrayDelimChar + gau.formatArrayForCustomDimension(snapshotGradeArray)) });
			}

			rateChange = (gad.pageData.ubiRateChangeIndicatorRenewal != undefined) ? gad.pageData.ubiRateChangeIndicatorRenewal : gad.pageData.ubiRateChangeIndicator;

			dataLayer.push({ participantID: gau.formatArrayForCustomDimension(gad.pageData.ubiParticipantID) });
			snapshotStatusArray = snapshotStatusArray.concat(badgeDisposition, gad.pageData.ubiVehicleCount, verExp, vehStatus, rateChange, vehDiscSrchgAmt);
			dataLayer.push({ snapshotStatus: snapshotStatusArray.join(gac.arrayDelimChar) });
		},
		initiateUserInputFinalSelectionEvents: function ($dataAnalyticsHandler) {
			var fsd = gad.finalSelectionData;

			if (fsd.isTransMakeAPayment === 'Y' || fsd.isTransAddFSP === 'Y' || fsd.isTransEditFSP === 'Y') {
				this.paymentsUserInputFinalSelectionEvents();
			}

			if (fsd.isTransProofOfInsurance === 'Y') {
				this.documentsUserInputFinalSelectionEvents();
			}

			if (fsd.isTransEndorsement === 'Y' || fsd.isTransAuthorizeCard === 'Y' || fsd.isTransAuthorizeEFT === 'Y') {
				this.endorsementsUserInputFinalSelectionEvents($dataAnalyticsHandler);
			}
		},
		paymentsUserInputFinalSelectionEvents: function () {
			var fsd = gad.finalSelectionData,
                paymentDate = fsd.fspPaymentDate !== '' ? fsd.fspPaymentDate : fsd.dateNow,
                debitCardSelected = (fsd.paymentMethodDisplayed === 'Card' && fsd.debitCardSelected !== '') ? fsd.debitCardSelected : 'Not Available',
                action = gac.gaEventActions.userInputFinalSelections;

			logEvent(action, fsd.paymentExpKeySelectLabel, null, { itemValue: fsd.paymentExpKeySelect });
			logEvent(action, fsd.paymentMethodLabel, null, { itemValue: fsd.paymentMethodDisplayed });
			logEvent(action, fsd.paymentDateLabel, null, { dataValue: paymentDate });
			logEvent(action, fsd.paymentAmountLabel, null, { dataValue: gau.formatCurrency(fsd.paymentAmount) });
			logEvent(action, fsd.debitCardSelectedLabel, null, { itemValue: debitCardSelected });
		},
		documentsUserInputFinalSelectionEvents: function () {
			var fsd = gad.finalSelectionData,
                action = gac.gaEventActions.userInputFinalSelections,
                label,
                recapDeliveryMethods,
                $recapSelections = $('section.line').find('h2'),
                selectionLabels = [fsd.poiOptionLabel],
                selectionValues = [fsd.poiOption];

			if (gad.pageData.txName === 'ProofOfInsuranceIDCard' && fsd.poiRenewalIDCardEligible === 'Y') {
				selectionLabels.push(fsd.policyPeriodLabel);
				selectionValues.push(fsd.poiTermSelected);
			}
			$.each($recapSelections, function () {
				selectionLabels.push('Delivery Method');
				selectionValues.push($(this).text());
			});
			label = gau.formatLabelForFinalSelections(selectionLabels, selectionValues);

			logEvent(action, label, null, null);
		},
		endorsementsUserInputFinalSelectionEvents: function ($dataAnalyticsHandler) {
			var action = gac.gaEventActions.userInputFinalSelections,
                label;

			label = gau.formatLabelForFinalSelectionsByDataAnalyticsHandler($dataAnalyticsHandler);

			logEvent(action, label, null, null);
		},
		stopAutomaticPaymentUserInputFinalSelectionEvents: function () {
			var action = gac.gaEventActions.userInputFinalSelections,
                fsd = gad.finalSelectionData,
                label = 'txName:StopAutomaticPayments',
                customDimensions = {
                	userInputId: $("input[name='stp_atmt_pay_sel']:checked").attr('id'),
                	zone: gac.eventZones.interaction,
                	testCohort: ''
                };

			label = label.concat(gac.arrayDelimChar, fsd.stopAutomaticPaymentSelectLabel, ':', fsd.stopAutomaticPaymentSelect);

			if ($("input[name='stp_atmt_pay_sel']:checked").attr('id') === 'stp_atmt_pay_sel.2') {

				customDimensions.testCohort = googleAnalytics.core.defectionMgmntCustonDimensions();
			}

			logEvent(action, label, null, customDimensions);

		},


		initiateReviewBeforeSubmitSelectionEvents: function ($dataAnalyticsHandler) {
			var action = gac.gaEventActions.reviewBeforeSubmitSelections,
                label;

			label = gau.formatLabelForFinalSelectionsByDataAnalyticsHandler($dataAnalyticsHandler);

			logEvent(action, label, null, null);
		},

		bindContinueBtn: function () {
			var $btn = $('#interaction, #divB').find('.buttons a');

			try {
				$btn.click(function () {
					if ($btn.attr('id') != undefined && ($btn.attr('id').match('Nav_Continue') || $btn.attr('id').match('Navigation_Continue'))) {
						if (gad.pageData.txName === 'StopAutomaticPayments') googleAnalytics.core.stopAutomaticPaymentUserInputFinalSelectionEvents();
					}
				});
			}
			catch (err) {
				//Do Nothing
			}
		},
		logVehicleEligibility: function () {
			var eligibleVehicles = $('*[data-analytics-snapshot-elig]');
			if (eligibleVehicles.length > 0) {
				var label = "Eligible Vehicle for Snapshot";
				for (var eligibleVehicleIter = 0; eligibleVehicleIter < eligibleVehicles.length; eligibleVehicleIter++) {
					label = label + "&" + eligibleVehicles[eligibleVehicleIter].innerText;
				}
				logEvent(gac.gaEventActions.sysEvent, label, eligibleVehicles.length, null);
			}
			var ineligibleVehicles = $('*[data-analytics-snapshot-inelig]');
			if (ineligibleVehicles.length > 0) {
				var label = "Ineligible Vehicle for Snapshot";
				for (var ineligibleVehicleIter = 0; ineligibleVehicleIter < ineligibleVehicles.length; ineligibleVehicleIter++) {
					label = label + "&" + ineligibleVehicles[ineligibleVehicleIter].innerText;
				}
				logEvent(gac.gaEventActions.sysEvent, label, ineligibleVehicles.length, null);
			}
		},
		logMoosAB: function () {
			logEvent(gac.gaEventActions.sysEvent, 'MoosABTest&' + $('*[data-analytics-moos-ab-result]').attr('data-analytics-moos-ab-result'), null, null);
		},
		bindHeader: function ($header) {
			var label,
                zone = gac.eventZones.header,
                userInputId;

			$header.find('a').not('a:has(img)').click(function () {
				label = gau.getEventLabel($(this));
				userInputId = this.id;
				logEvent(gac.gaEventActions.linkClick, label, null, { zone: zone, userInputId: userInputId });
			});

			$header.find('img').click(function () {
				var action;

				if (this.parentNode.id === 'gripper') {
					action = gac.gaEventActions.buttonClick;
					label = 'Menu Button';
					userInputId = this.parentNode.id;
				} else if (this.id === 'logo') {
					action = gac.gaEventActions.imageClick;
					label = 'Logo';
					userInputId = this.id;
				}
				logEvent(action, label, null, { zone: zone, userInputId: userInputId });
			});
		},
		bindS2Header: function ($s2header) {
			var label, customDimensions, navigationUrl;

			$s2header.find('a').not('a:has(img#S2largeScreenLogo), a:has(img#S2smallScreenLogo)').click(function (evt) {
				label = gau.getEventLabel($(this));
				navigationUrl = $(this).attr('href');
				if (navigationUrl !== undefined) {
					evt.preventDefault();
					customDimensions = { zone: gac.eventZones.header, eventCallback: function () { window.location = navigationUrl; }, eventTimeout: gac.eventTimeoutPeriod };
				} else {
					customDimensions = { zone: gac.eventZones.header };
				}
				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});
			$s2header.find('img#S2largeScreenLogo, img#S2smallScreenLogo').click(function (evt) {
				label = gau.getEventLabel($(this));
				navigationUrl = $(this).parent('a').attr('href');
				if (navigationUrl !== undefined) {
					evt.preventDefault();
					customDimensions = { zone: gac.eventZones.header, eventCallback: function () { window.location = navigationUrl; }, eventTimeout: gac.eventTimeoutPeriod };
				} else {
					customDimensions = { zone: gac.eventZones.header };
				}
				logEvent(gac.gaEventActions.buttonClick, label, null, customDimensions);
			});
		},
		bindFooter: function ($footer) {
			var action,
                label,
                zone = gac.eventZones.footer,
                userInputId;

			$footer.find('a').click(function () {
				if (this.parentNode.id === 'verisignlogo') {
					action = gac.gaEventActions.imageClick;
					label = 'Verisign Logo';
				} else {
					action = gac.gaEventActions.linkClick;
					label = gau.getEventLabel($(this));

				}
				userInputId = this.id;
				logEvent(action, label, null, { zone: zone, userInputId: userInputId });
			});
		},
		bindS2Footer: function ($s2footer) {
			var action, label, customDimensions;
			$s2footer.find('a').click(function (evt) {
				action = ($(this).has('svg').length > 0) ? gac.gaEventActions.buttonClick : gac.gaEventActions.linkClick;
				label = gau.getEventLabel($(this));
				var navigationUrl = $(this).not('[target]').attr('href');
				if (navigationUrl !== undefined) {
					evt.preventDefault();
					customDimensions = { zone: gac.eventZones.footer, eventCallback: function () { window.location = navigationUrl; }, eventTimeout: gac.eventTimeoutPeriod };
				} else {
					customDimensions = { zone: gac.eventZones.footer };
				}
				logEvent(action, label, null, customDimensions);
			});
		},
		bindGlobalMessageZone: function ($globalMessage) {
			var zone = gac.eventZones.globalMessage,
                $messages = $globalMessage.find('#globalMessageExpanded div'),
                messageIds = $.map($messages, function (msg) { return msg.id.trim(); }),
                globalMsgArray = gau.formatZoneForCustomDimension($globalMessage, messageIds);

			dataLayer.push({ globalMsgArray: globalMsgArray });

			$messages.find('a').click(function () {
				var $msgLink = $(this),
                    messageId = $msgLink.closest('div').attr('id'),
                    shouldMaskMessage = $msgLink.closest('div').data('personal-id-info') === 'maskMessage',
                    messageMask = shouldMaskMessage ? gac.maskedMsgText : undefined,
                    messageText = gau.formatAndMaskText($msgLink.parent().text(), messageMask),
                    customDimensions = {
                    	contentTake: 'globalMsg=' + messageId,
                    	globalMsgArray: globalMsgArray,
                    	userInputId: messageId,
                    	zone: zone
                    };

				logEvent(gac.gaEventActions.linkClick, messageText, null, customDimensions);
			});

			$globalMessage.find('#globalMessageCollapsed #importantMessages').click(function () {
				var customDimensions = {
					globalMsgArray: globalMsgArray,
					userInputId: this.id,
					zone: zone
				};

				logEvent(gac.gaEventActions.linkClick, $(this).text(), null, customDimensions);
			});

			$globalMessage.find('#globalMessageExpanded #msgList a').click(function () {
				var customDimensions = {
					contentTake: 'MsgPosition=' + $(this).text(),
					globalMsgArray: globalMsgArray,
					userInputId: this.id,
					zone: zone
				};

				logEvent(gac.gaEventActions.linkClick, 'View hidden global message', null, customDimensions);
			});

			$globalMessage.find('#hideMessage').click(function () {
				var customDimensions = {
					globalMsgArray: globalMsgArray,
					userInputId: this.id,
					zone: zone
				};

				logEvent(gac.gaEventActions.linkClick, 'Collapse global messages', null, customDimensions);
			});

			$globalMessage.find('#showMessage').click(function () {
				var customDimensions = {
					globalMsgArray: globalMsgArray,
					userInputId: this.id,
					zone: zone
				};

				logEvent(gac.gaEventActions.linkClick, 'Expand global messages', null, customDimensions);
			});
		},
		bindLocalMessageZone: function ($localMessage) {
			var zone = gac.eventZones.localMessage,
                $messages = $localMessage.find('p'),
                messageIds = $.map($messages, function (msg) {
                	var msgId = $(msg).find('span').attr('id') || '';
                	return msgId.trim();
                }),
                localMsgArray = gau.formatZoneForCustomDimension($localMessage, messageIds);

			dataLayer.push({ localMsgArray: localMsgArray });

			$localMessage.find('a').click(function () {
				var $msgLink = $(this),
                    messageId = $msgLink.closest('span').attr('id'),
                    shouldMaskMessage = $msgLink.closest('span').data('personal-id-info') === 'maskMessage',
                    messageMask = shouldMaskMessage ? gac.maskedMsgText : undefined,
                    messageText = gau.formatAndMaskText(
                                  $msgLink.closest('span').find('font').attr('data-personal-id-info') !== undefined ? $msgLink.closest('span').text().replace($msgLink.closest('span').find('font').text(), $msgLink.closest('span').find('font').attr('data-personal-id-info')) :
                                  $msgLink.closest('span').text(), messageMask),
                    customDimensions = {
                    	contentTake: 'localMsg=' + messageId,
                    	localMsgArray: localMsgArray,
                    	userInputId: messageId,
                    	zone: zone
                    };
				if (messageId) {
					logEvent(gac.gaEventActions.linkClick, messageText, null, customDimensions);
				}
			});
		},
		bindCounselMessageZone: function ($counselZone) {
			var zone = gac.eventZones.counselMessage,
                $messages = $counselZone.find('p'),
                messageIds = $.map($messages, function (msg) {
                	var id = $(msg).children('span').attr('id'),
                        messageId = '';
                	if (id) {
                		messageId = id.trim();
                	}
                	return messageId;
                }),
                counselMsgArray = gau.formatZoneForCustomDimension($counselZone, messageIds);

			dataLayer.push({ counselMsgArray: counselMsgArray });

			$counselZone.find('a').click(function () {
				var $msgLink = $(this),
                    id = $msgLink.closest('span').attr('id'),
                    messageId = id ? id.trim() : undefined,
                    messageText = $msgLink.attr('data-personal-id-info') !== undefined ?
                    gau.formatAndMaskText(
                                            $msgLink.closest('span').text().replace(
                                            $msgLink.text(),
                                            $msgLink.attr('data-personal-id-info')
                                            )
                                          ) : gau.formatAndMaskText($msgLink.closest('span').text()),
                    customDimensions = {
                    	contentTake: 'counselMsg=' + messageId,
                    	counselMsgArray: counselMsgArray,
                    	userInputId: messageId,
                    	zone: zone
                    };

				logEvent(gac.gaEventActions.linkClick, messageText, null, customDimensions);
			});
		},
		bindCrossSellMessageZone: function ($crossSellZone) {
			var zone = gac.eventZones.interaction,
                $messages = $crossSellZone.find('div'),
                messageIds = $.map($messages.children('span'), function (span) { return span.id; }),
                crossSellMsgArray = gau.formatZoneForCustomDimension($crossSellZone, messageIds);

			dataLayer.push({ xslMsgArray: crossSellMsgArray });

			$crossSellZone.find('a').click(function () {
				var $msgLink = $(this),
                    isImageLink = $msgLink.children('img').length > 0,
                    messageId = $msgLink.closest('span')[0].id,
                    messageText = isImageLink ? $msgLink.children('img').attr('title') : $msgLink.text(),
                    eventType = isImageLink ? gac.gaEventActions.imageClick : gac.gaEventActions.linkClick,
                    customDimensions = {
                    	contentTake: 'xslMsg=' + messageId,
                    	xslMsgArray: crossSellMsgArray,
                    	userInputId: messageText,
                    	zone: zone
                    };

				logEvent(eventType, messageText, null, customDimensions);
			});
		},
		bindActionZone: function ($actionZone) {
			var zone = gac.eventZones.action,
                $action = $actionZone.find('.buttons a'),
                label = gau.formatAndMaskText($actionZone.find('h3').text()),
                actionDisplay = gau.formatZoneForCustomDimension($actionZone, label);

			dataLayer.push({ actionZone: actionDisplay });

			$action.click(function () {
				var customDimensions = {
					userInputId: this.id,
					zone: zone
				};
				logEvent(gac.gaEventActions.buttonClick, label, null, customDimensions);
			});
		},
		bindCommonQuestionsZone: function ($faqZone) {
			var zone = gac.eventZones.faqZone,
                $faqQuestions = $faqZone.find('dl dt'),
                $faqAnswers = $faqZone.find('dl dd'),
                faqIds = $.map($faqQuestions, function (faq) { return faq.id; }),
                faqArray = gau.formatZoneForCustomDimension($faqZone, faqIds);

			dataLayer.push({ FAQArray: faqArray });

			$faqQuestions.find('a').click(function () {
				var $faqLink = $(this),
                    faqId = $faqLink.closest('dt').attr('id'),
                    label = gau.getEventLabel($faqLink),
                    customDimensions = {
                    	contentTake: 'FAQID=' + faqId,
                    	FAQArray: faqArray,
                    	userInputId: faqId,
                    	zone: zone
                    };

				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});

			$faqAnswers.find('a').click(function () {
				var $link = $(this),
                    faqId = $link.closest('dd').prev('dt').attr('id'),
                    maskText = $link.data('personal-id-info') || $link.data('analytics-handler'),
                    label = gau.formatAndMaskText($link.parent().text(), maskText),
                    customDimensions = {
                    	contentTake: 'FAQAnswered=' + faqId,
                    	FAQArray: faqArray,
                    	userInputId: faqId,
                    	zone: zone
                    };

				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});
		},
		bindToolsZone: function ($toolsZone) {
			var zone = gac.eventZones.tools,
                $tools = $toolsZone.find('a'),
                toolsIds = $.map($tools, function (tool) { return $(tool).text(); }),
                toolsArray = gau.formatZoneForCustomDimension($toolsZone, toolsIds);

			dataLayer.push({ 'toolsArray': toolsArray });

			$tools.click(function () {
				var label = $(this).text(),
                    customDimensions = {
                    	toolsArray: toolsArray,
                    	userInputId: this.id,
                    	zone: zone
                    };

				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});

		},
		bindLocalNavZone: function ($localNavZone) {
			var zone = gac.eventZones.leftNav,
                $navItems = $localNavZone.find('li'),
                navItemIds = $.map($navItems, function (navItem) { return navItem.id; }),
                leftNavArray = gau.formatZoneForCustomDimension($localNavZone, navItemIds);

			dataLayer.push({ leftNavArray: leftNavArray });

			$localNavZone.find('a').click(function () {
				var $link = $(this),
                    label = gau.getEventLabel($link),
                    customDimensions = {
                    	leftNavArray: leftNavArray,
                    	userInputId: $link.closest('li').attr('id'),
                    	zone: zone
                    };

				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});
		},
		bindInteractionZone: function ($interactionZone, $linksToExclude) {
			var zone = gac.eventZones.interaction,
                $buttons = $interactionZone.find('.buttons a, a.button, .navButtons a, .buttonsTertiary a, a.buttonsTertiary'),
                $tableLinks = $interactionZone.find('table[data-analytics-handler="first column"] a'),
                $expanderLinks = $interactionZone.find('.expanderTrigger'),
                $images = $interactionZone.find('img').not('a img'),
                $links = $interactionZone.find('a').not($buttons).not($tableLinks).not($expanderLinks).not($linksToExclude),
                $offersDropDown = $interactionZone.find('select[data-analytics-handler="offersDropDown"]'),
                $payAmtOptions = $interactionZone.find('input[id^="pmt_exp_key_sel."]'),
                $payMethods = $interactionZone.find('label[for^="pmt_mthd_desc."]'),
                $ubiDropDown = $interactionZone.find('select[id="ubi_rpt_veh_indx"]'),
                $dropDowns = $interactionZone.find('select').not($offersDropDown).not($ubiDropDown),
                pmtAmtOptionsArray,
                payMethodsArray;

			if ($payAmtOptions.length > 0) {
				pmtAmtOptionsArray = $.map($payAmtOptions, function (btn) { return btn.value.trim(); });
				dataLayer.push({ payAmtOption: gau.formatArrayForCustomDimension(pmtAmtOptionsArray) });
			}

			if ($payMethods.length > 0) {
				payMethodsArray = $.map($payMethods, function (btn) { return $(btn).text().trim(); });
				dataLayer.push({ payMethod: gau.formatArrayForCustomDimension(payMethodsArray) });
			}
			$images.click(function () {
				var label = '',
                    $image = $(this),
                    customDimensions = {
                    	userInputId: $image.attr('id'),
                    	zone: zone
                    };

				label = gau.getEventLabel($image);

				logEvent(gac.gaEventActions.imageClick, label, null, customDimensions);
			});

			$links.click(function () {

				var label = '',
                    $link = $(this),
                    isImageLink = $link.children('img').length > 0,
                    isSpanInLink = ($link.children('span').length > 0) && ($link.children('span').first().attr('data-personal-id-info') != undefined),
                    eventType = isImageLink ? gac.gaEventActions.imageClick : gac.gaEventActions.linkClick,

                    maskText = isSpanInLink ? gau.formatAndMaskText($link.text(), $link.children('span').first().attr('data-personal-id-info')) : gau.formatAndMaskText($link.text()),
                    spanText = $link.children('span').first().text(),

                    maskedLabel = isSpanInLink ? gau.formatAndMaskText($link.text().replace(
                                              spanText,
                                              maskText)) : gau.getEventLabel($link),

                    customDimensions = {
                    	userInputId: $link.attr('id'),
                    	zone: zone
                    };

				label = maskedLabel;
				gau.updateCSPPolicyDimensions($link);

				logEvent(eventType, label, null, customDimensions);
			});



			$buttons.click(function () {
				var $btn = $(this),
                    label = gau.getEventLabel($btn),
                    customDimensions = {
                    	userInputId: $btn.attr('id'),
                    	zone: zone
                    };
				if ($('*[data-analytics-handshakeid]').length === 1) {
					dataLayer.push({ handshakeGUID: $('*[data-analytics-handshakeid]').attr('data-analytics-handshakeid') });
				}
				logEvent(gac.gaEventActions.buttonClick, label, null, customDimensions);
			});

			$tableLinks.click(function () {


				var $link = $(this),
                    firstColumnText = $link.closest('tr').children().first().text(),
                    maskText = $link.attr('data-personal-id-info') || $link.attr('data-analytics-handler'),
                    label = gau.formatAndMaskText(firstColumnText, maskText),
                    customDimensions = {
                    	userInputId: $link.attr('id'),
                    	zone: zone
                    };
				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});

			$expanderLinks.click(function () {
				var $link = $(this),
                    label = $link.text(),
                    customDimensions = {
                    	userInputId: $link.closest('section').attr('id'),
                    	zone: zone
                    };
				logEvent(gac.gaEventActions.linkClick, label, null, customDimensions);
			});

			$interactionZone.find('input[type="radio"]').change(function () {
				var $radio = $(this),
                    radioButtonName = $radio.attr('name'),
                    label,
                    customDimensions = {
                    	userInputId: $radio.attr('id'),
                    	zone: zone
                    };

				if ($radio.attr('name') === 'stp_atmt_pay_sel') gad.finalSelectionData.stopAutomaticPaymentSelect = $radio.attr('value');
				if ($('input[type="radio"]').closest('table').data('analytics-handler') === 'second column') {
					label = gau.formatAndMaskText($('input[type="radio"]').closest('table[data-analytics-handler] thead tr').children('th:nth-child(2)').text());
				} else if ($radio.attr('name') === 'pog_curr_indx') {
					label = ChangeBillPlanRadioChange($radio);
				} else if ($radio.attr('data-analytics-question') !== undefined) {
					label = $radio.attr('data-analytics-question');
				} else {
					label = gau.getEventLabel($radio);
				}
				if ($radio.attr('data-analytics-value') !== undefined) {
					customDimensions.dataValue = $radio.attr('data-analytics-value');
				}

				logEvent(gac.gaEventActions.radioButtonChange, label, null, customDimensions);
			});

			function ChangeBillPlanRadioChange($radio) {
				var $paymethodLabel;
				if ($radio.attr('paymentmethodindicator') == 'Y')
					$paymethodLabel = "EFT";
				else if ($radio.attr('paymentmethodindicator') == 'C')
					$paymethodLabel = "Automatic Card";
				else
					$paymethodLabel = "Direct Invoice";
				return gau.formatAndMaskText("Choose Bill plan&Plan:" + $radio.attr('paymentcount') + "-Payment Method/Schedule:" + $paymethodLabel + "-CSDD:" + $radio.attr('CSDDIndicator'));
			}

			$interactionZone.find('input[type="text"], input[type="email"], input[type="password"], input[type="tel"], textarea').focus(function () {
				var $textBox = $(this),
                    label = ($textBox.attr('type') === 'tel') ? gau.formatAndMaskText($textBox.closest('div').siblings('label').text()) : gau.getEventLabel($textBox),
                    customDimensions = {
                    	userInputId: $textBox.attr('id'),
                    	zone: zone
                    };
				logEvent(gac.gaEventActions.textBoxFocus, label, null, customDimensions);
			});

			$interactionZone.find('input[type="checkbox"]').change(function () {
				var $checkBox = $(this),
                    label = gau.getEventLabel($checkBox),
                    customDimensions = {
                    	userInputId: $checkBox.attr('id'),
                    	zone: zone
                    };
				logEvent(gac.gaEventActions.boxCheck, label, null, customDimensions);
			});




			$offersDropDown.change(function () {
				var $dropDown = $(this),
                    $parentDiv = $dropDown.parent(),
                    selectedText = $dropDown.data('personal-id-info') || $dropDown.children(':selected').text(),
                    label = $parentDiv.prevAll('div').find('h3').html() || 'Label not found',
                    offerPolicies = gad.pageData.polNbr,
                    policyNumber = $dropDown.siblings().attr('data-analytics-policy'),
                    customDimensions = {
                    	contentTake: selectedText,
                    	userInputId: $dropDown.attr('id'),
                    	polNbr: offerPolicies,
                    	zone: zone
                    };
				if (policyNumber) {
					customDimensions.polNbr = policyNumber;
				}

				logEvent(gac.gaEventActions.dropdownChange, label, null, customDimensions);
			});

			$dropDowns.change(function () {
				var $dropDown = $(this),
                    label = gau.getEventLabel($dropDown),
                    maskText = $dropDown.children(':selected').data('personal-id-info') || $dropDown.data('personal-id-info'),
                    selectedText = gau.formatAndMaskText($dropDown.find(':selected').text(), maskText),
                    customDimensions = {
                    	contentTake: selectedText,
                    	userInputId: $dropDown.attr('id'),
                    	zone: zone
                    };
				logEvent(gac.gaEventActions.dropdownChange, label, null, customDimensions);
			});

			$ubiDropDown.change(function () {
				var $dropDown = $(this),
                    maskText = "(MOBILE NICKNAME - PII)",
                    label = gau.getEventLabel($dropDown),
                    selectedText = gau.formatAndMaskText($dropDown.find(':selected').text()).replace(/\(.*?\)/, maskText),
                    customDimensions = {
                    	contentTake: selectedText,
                    	userInputId: $dropDown.attr('id'),
                    	zone: zone
                    };
				logEvent(gac.gaEventActions.dropdownChange, label, null, customDimensions);
			});
		},
        modalShow: function ($modals) {

            if ($modals.length > 0) {

                var label = $modals.find('h1').text(),
                    action = gac.gaEventActions.display,
                    customDimensions = {                    
                    userInputId: $modals.attr('id'),
                    zone: gac.eventZones.interaction
                };

		logEvent(action, label, null, customDimensions);
            }
        },
		logAlerts: function ($inlineAlerts) {
			if ($inlineAlerts.length > 0) {
				logEvent(gac.gaEventActions.sysEvent, 'Alert=Page', null, { zone: gac.eventZones.interaction });
			}
		},
		logErrorsAndEdits: function () {
			var zone = gac.eventZones.interaction,
                hasPageError = $('#top_error').length > 0,
                label = hasPageError ? 'Edit Error=Page' : '',
                $alertContainers = $('div .alertContainer'),
                $inputsWithEdits = $alertContainers.find(':input').not(':hidden'); // find the visible inputs inside the alert containers

			$.each($inputsWithEdits, function () {
				var inputLabel = gau.getEventLabel($(this));

				if (label) {
					label = label.concat(gac.arrayDelimChar, inputLabel);
				} else {
					label = 'Edit Error=' + inputLabel;
				}
			});

			if (label.length > 0) {
				logEvent(gac.gaEventActions.sysEvent, label, null, { zone: zone });
			}
		},
		logSystemErrors: function () {
			var $errorMessages = $('[data-error-type="unintended"][id^="err"], [data-error-type="intended"][id^="err"], [data-error-type="intended"] [id^="err"]'),
                label = '';

			$errorMessages.each(function () {
				if (label === '') {
					label = ($(this).data('error-type') === 'unintended') ? 'Unintended Error=' + this.id : 'Intended Error=' + this.id;
				} else {
					label = label.concat(gac.arrayDelimChar, this.id);
				}
			});

			if (label.length > 0) {
				logEvent(gac.gaEventActions.sysEvent, label);
			}
		}
	};
}(googleAnalytics.data, googleAnalytics.constants, googleAnalytics.utils));

(function (w, d, s, l, i) {
	w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });
	var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true;
	j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
})(window, document, 'script', 'dataLayer', googleAnalytics.data.googleTagManagerKey);

$(document).ready(function () {
	'use strict';
	googleAnalytics.utils.checkGoogleSessionCookie();
	googleAnalytics.utils.setGoogleSessionCookie();
	googleAnalytics.core.bindHeader($('#header'));
	if (window.google_tag_manager) {
		googleAnalytics.core.bindS2Header($('#S2Header'));
		googleAnalytics.core.bindS2Footer($('#S2Footer'));
	}
	googleAnalytics.core.bindFooter($('#footer'));
	googleAnalytics.core.bindGlobalMessageZone($('#globalMessage'));
	googleAnalytics.core.bindLocalMessageZone($('#localMessage'));
	googleAnalytics.core.bindInteractionZone($('#console, #interaction, #divB, #main'), $('#crossSellMessages a'));
    googleAnalytics.core.modalShow($('#mhContentModal'));
	googleAnalytics.core.bindCounselMessageZone($('#counsel'));
	googleAnalytics.core.bindCrossSellMessageZone($('#crossSellMessages'));
	googleAnalytics.core.bindActionZone($('#actionZone'));
	googleAnalytics.core.bindCommonQuestionsZone($('#askUs'));
	googleAnalytics.core.bindToolsZone($('#tools'));
	googleAnalytics.core.bindLocalNavZone($('#localNav'));
	googleAnalytics.core.logAlerts($('div.inlineAlert'));
	googleAnalytics.core.logErrorsAndEdits();
	googleAnalytics.core.logSystemErrors();
	if (googleAnalytics.utils.shouldInitFinalSelections()) { googleAnalytics.core.initiateUserInputFinalSelectionEvents($('*[data-analytics-handler]')); }
	if (googleAnalytics.utils.shouldInitReviewBeforeSubmitSelections()) { googleAnalytics.core.initiateReviewBeforeSubmitSelectionEvents($('*[data-analytics-handler]')); }
	if (googleAnalytics.utils.shouldInitUBICustomDimensions()) { googleAnalytics.core.ubiCustomDimensions($('*[data-analytics-handler]')); }
	if (googleAnalytics.utils.shouldCollectPageData()) { googleAnalytics.core.bindContinueBtn(); }
	if (googleAnalytics.utils.shouldLogMoosAB()) { googleAnalytics.core.logMoosAB(); }
	if (googleAnalytics.utils.shouldLogMoosSnapshotData()) { googleAnalytics.core.logVehicleEligibility(); }
});
