function window_onload() 
{
	return false;
}



/*
	form element highlighting
*/
function formHighlightOn(elementId) {
	if (document.getElementById) {
		//document.getElementById(elementId).style.backgroundColor="red"
		var id = document.getElementById(elementId);
		id.className = "Highlight";
	}
}
function formHighlightOff(elementId) {
	if (document.getElementById) {
		//document.getElementById(elementId).style.backgroundColor=""
		var id = document.getElementById(elementId);
		id.className = "Normal";
	}
}
		
/*
	showorhide - toggle elements on/off
*/
function showorhide(id) { 
	if (document.getElementById(id).style.display == "block") {
		document.getElementById(id).style.display = "none";
	} else {
		document.getElementById(id).style.display = "block";
	}
}


/* #####################################################
		Clear form value on focus
		This credit must stay intact
		Script by http://www.java-Scripts.net and http://wsabstract.com
   ##################################################### */
function doClear(theText) {
	if (theText.value == theText.defaultValue) {
		theText.value = "";
	}
}
		 
/*
	Toggle between 2 elements. switchVisible is being phased out, use changeArrowDirection instead.
*/

function switchVisible(option1,option2,vSwitch) {
	if (vSwitch == true) {
		document.getElementById(option1).style.display = "inline";
		document.getElementById(option2).style.display = "none";
	} else {
		document.getElementById(option1).style.display = "none";
		document.getElementById(option2).style.display = "inline";
	}
}

function changeArrowDirection(option1,option2,vSwitch) {
	if (vSwitch == true) {
		document.getElementById(option1).className = "displayOn";
		document.getElementById(option2).className = "displayOff";
	} else {
		document.getElementById(option1).className = "displayOff";
		document.getElementById(option2).className = "displayOn";
	}
}

/*
	Autotabbing through input fields with Numeric-only values (Fields accept only keyboard and keypad numbers)
*/

var keyNum0 = 96;
var keyNum9 = 105;
var key0 = 48;
var key9 = 57;
var keyDelete = 46;
var keyBackspace = 8;
var keyTab = 9;
var keyLeftArrow = 37;
var keyRightArrow = 39;

function isInRange(val, lower, upper) {
	return val >= lower && val <= upper;
}
function isNumberKey(key) {
	return isInRange(key, key0, key9);
}    
function isNumberPadKey(key) {
	return isInRange(key, keyNum0, keyNum9);
}
function isEditKey(key) {
	return key == keyBackspace || key == keyDelete;
}
function isNavigationKey(key) {
	return key == keyTab || key == keyLeftArrow || key == keyRightArrow;
}
/*function keyPressNumeric(evt) {
	var key = evt.charCode ? evt.charCode : evt.keyCode;
	return isNumberKey(key) || (evt.charCode != null && evt.keyCode > 0 && (isEditKey(key) || isNavigationKey(key)));
}*/
function keyUpAutoTab(e, currentControl, nextControl) {
	if (!isNumberKey(e.keyCode) && !isNumberPadKey(e.keyCode)) {
		return false;
	}
	if (currentControl.value.length >= currentControl.maxLength && nextControl != null) {
		nextControl.focus();
		if (nextControl.nodeName != "SELECT") {
			nextControl.select();
		}	
	}
	return true;
}


/*
	MM/DD/YYYY Display in date input fields (References Numeric-only functions ^Above)
*/

function cleanValue(control) {
	if (control.value=="mm" || control.value=="dd" || control.value=="yyyy") {
		if (!isNumberKey(control.keyCode) && !isNumberPadKey(control.keyCode)) {
			control.value = "";
			control.select();
		}
		control.className = "";
	}
}
function revertDefault(obj,def) {
	if (obj.value=="") {
		obj.className = "preformatted";
		obj.value = def;
	}
}

/*
	Clear 1 or more fields
	fields may be either a string of a field id or an array of strings of field ids.
	clearValues('fieldID');
	clearValues(['fieldID1','fieldID2','fieldID3']);
*/
function clearValues(fields) {
	if (typeof(fields)=="string") {
		document.getElementById(fields).value="";
	} else {
		for (var i=0;i<fields.length;i++) {
			document.getElementById(fields[i]).value="";
		}
	}
}
function popUp(url,isMenu) {
	var menu = (isMenu==null) ? 0 : 1; 
	window.open(url, "newPage", "toolbar=0, scrollbars=0, location=0, menubar="+menu+", resizable=1, width=600, height=550, left = 120, top = 100");
}

function satisfactionSurveyPopUp(url, redirectUrl) {					
	window.open(url, 'SatisfactionSurvey', 'toolbar=0, location=0, scrollbars=1, menubar=0, resizable=1, width=400, height=530, left = 120, top = 100');
	document.location.href = redirectUrl;
	return true;							
}

function windowOpen(url) {
	window.open(url, '', 'resizable=1,scrollbars=1,toolbar=1,location=1,menubar=1');
}  

function showorhideActivities(id) { 
	var menu = document.getElementById(id);
	var display = menu.style.display;

	if (display == "block")
	{
		menu.style.display = "none";
	}
	else
	{
		menu.style.display = "block";
		SendRequestToServer("ContentTracker.aspx", "ID=" + id + "&experienceType=CLM&zoneDescription=FLOW ZONE");
	}
}      

/*
		Question displaying controled by checkbox
*/
function showorhideControledByCheckBox(checkBoxid,id) { 
	if (document.getElementById(checkBoxid).checked == true) {
		document.getElementById(id).style.display = "block";
	} else {
		document.getElementById(id).style.display = "none";
	}
}

//Pop up window js
function openPopup(url,windowName,w,h,scroll) {
	if (scroll==null) scroll=0;
	var popWindow = window.open(url,windowName,"toolbar=0,location=0,directories=0,status=1,menubar=0,scrollbars="+scroll+",resizable=1,width="+w+",height="+h+",left=20,top=10");
}
function newHeaderPopUp(url){
	window.open(url, 'newPage', 'toolbar=0, scrollbars=1, location=0, menubar=0, resizable=1, width=600, height=530, left = 120, top = 100');
}

/*
	Submit and use TCA navigate based upon Radio selected value. 
	Need to apply this onclick event of the button.
	Dependency: Have to make value of radio button as button ID for navigation
	For example:
	<input type="radio" id="anyID" name="radioName" value="BUTTON_Payments.MakePayment.DebitCardVerificationNav_SubmitAsCredit"]]>
*/
function SubmitOnRadioValue(radioName, defaultNavigation) {
	var objDebitChoice = document.getElementsByName(radioName);
	var noRadioChecked = true;
	for (var i=0;i<objDebitChoice.length;i++) {
		if (objDebitChoice[i].checked) {
			noRadioChecked = false;
			SubmitForm(objDebitChoice[i].value);
		}
	}
	
	if (noRadioChecked && defaultNavigation!="") {
		SubmitForm(defaultNavigation);
	}
}
function SubmitOnRadioValueDelay(option1,option2,vSwitch,radioName,defaultNavigation) {
	SubmitOnRadioValue(radioName,defaultNavigation);
	switchVisible(option1,option2,vSwitch);
}

function addEvent(elm, evType, fn, useCapture) {
	if (elm.addEventListener){
		elm.addEventListener(evType, fn, useCapture);
		return true;
	} else if (elm.attachEvent){
		var r = elm.attachEvent("on"+evType, fn);
		return r;
	} else {
		alert("Handler could not be added");
	}
}

/* ########################################################################################
	Modal Window Overlay
	Usage: openCBMW(Id of popup from within CBMWgroup, timedelay [optional], width [optional]);
   ######################################################################################## */

function openLogCBMW(id, index) {
	id = id + Math.abs(index);
	SendRequestToServer("ContentTracker.aspx","ID="+id+"&experienceType=CPD&zoneDescription=FLOW ZONE");
	openCBMW(index);
}

function toggleAllSelects(isShown) {
	objSelects = document.getElementsByTagName("select");

	if (isShown) {
		var displayClass = "displayInline";
	} else {
		var displayClass = "displayOff";
	}

	for (var i=0;i<objSelects.length;i++) {
		if (!isInCBMW(objSelects[i])) objSelects[i].className = displayClass;
	}
}


function isInCBMW(obj) {
	if (obj.parentNode) {
		while (obj.parentNode) {
			if (obj.id=="CBMWgroup") return true;
			obj = obj.parentNode;
		}
	}
	return false;
}

function closeAllCBMW() {
	var objCBMWGroup = document.getElementById("CBMWgroup");
	if (objCBMWGroup != null) {
		var objCBMW = objCBMWGroup.getElementsByTagName("div");
		for (var i=0;i<objCBMW.length;i++) {
			if (objCBMW[i].className == "displayCBMW") objCBMW[i].className = "displayOff";
		}
	}

	document.getElementById("CBMWoverlay").className = "displayOff";

	toggleAllSelects(true);
	toggleAllSIFR(true);
}

function openCBMW(index,setWidth) {
	closeAllCBMW();
	if (setWidth == null) setWidth = -1;
	toggleAllSelects(false);
	var objOverlay = document.getElementById("CBMWoverlay");
	var objCBMW = document.getElementById("CBMW" + index);

	var yScroll;
	if (self.pageYOffset) {
		yScroll = self.pageYOffset;
	} else if (document.documentElement && document.documentElement.scrollTop) {
		yScroll = document.documentElement.scrollTop;
	} else if (document.body) {
		yScroll = document.body.scrollTop;
	}

	var xScrollMax, yScrollMax;
	if (window.innerHeight && window.scrollMaxY) {	
		xScrollMax = document.body.scrollWidth;
		yScrollMax = window.innerHeight + window.scrollMaxY;
	} else if (document.documentElement && document.documentElement.scrollHeight) {
		if (document.documentElement.scrollHeight > document.documentElement.offsetHeight) {
			xScrollMax = document.documentElement.scrollWidth;
			yScrollMax = document.documentElement.scrollHeight;
		} else {
			xScrollMax = document.documentElement.offsetWidth;
			yScrollMax = document.documentElement.offsetHeight;
		}
	} else if (document.body.scrollHeight > document.body.offsetHeight) {
		xScrollMax = document.body.scrollWidth;
		yScrollMax = document.body.scrollHeight;
	} else {
		xScrollMax = document.body.offsetWidth;
		yScrollMax = document.body.offsetHeight;
	}

	var windowWidth, windowHeight;
	if (self.innerHeight) {
		windowWidth = self.innerWidth;
		windowHeight = self.innerHeight;
	} else if (document.documentElement && document.documentElement.clientHeight) {
		windowWidth = document.documentElement.clientWidth;
		windowHeight = document.documentElement.clientHeight;
	} else if (document.body) {
		windowWidth = document.body.clientWidth;
		windowHeight = document.body.clientHeight;
	}
	pageHeight = (yScrollMax < windowHeight) ? windowHeight : yScrollMax;
	pageWidth = (xScrollMax < windowWidth) ? windowWidth : xScrollMax;

	objOverlay.style.height = pageHeight + "px";
	objOverlay.style.width = pageWidth + "px";
	objOverlay.className = "displayOn";
	objCBMW.className = "displayCBMW";

	if (setWidth>0) {
		objCBMW.style.width = setWidth  + "px";
	}
	var CBMWWidth = objCBMW.offsetWidth;

	var CBMWTop = yScroll + Math.round(windowHeight / 5);
	var CBMWLeft = Math.round(pageWidth / 2) - Math.round(CBMWWidth / 2);
	if ((CBMWTop>0)&&(objCBMW.offsetHeight<windowHeight*4/5)) {
		objCBMW.style.top = CBMWTop + "px";
	} else {
		objCBMW.style.top = yScroll + "px";
	}

	if (CBMWLeft>0) {
		objCBMW.style.left = CBMWLeft + "px";
	} else {
		objCBMW.style.left = "0px";
	}
	toggleAllSIFR(false);

	if (document.getElementById("CBMW_anchor" + index)) {
		document.getElementById("CBMW_anchor" + index).focus();
	}
}

function closeCBMW(index) {
	document.getElementById("CBMWoverlay").className = "displayOff";
	document.getElementById("CBMW" + index).className = "displayOff";

	toggleAllSelects(true);
	toggleAllSIFR(true);
}

function openFirstCBMW() {
	openCBMW(1);
}

function setFocus() {
	var focusSet = false;
	if (document.forms[0]) {
		for (var i=0;i<document.forms[0].elements.length;i++) {
			obj = document.forms[0].elements[i];
			if ((obj.nodeName=="INPUT" && obj.attributes['type'].value!="hidden")||(obj.nodeName=="TEXTAREA")) {
				try {
					obj.focus();
					focusSet = true;
				} catch(err) {
					focusSet = false;
				}
				if (focusSet) return true;
			} else if (obj.nodeName=="SELECT") {
				return false;
			}
		}
	}
}

function initFAQ(divid) {
	var section = (divid=="topics") ? "topics" : "askUs";
	if (document.getElementById(section)!=null) {
		var faqLinks = document.getElementById(section).getElementsByTagName("a");
		for (var i=0;i<faqLinks.length;i++) {
			if (faqLinks[i].parentNode.nodeName == "DT") {
				faqLinks[i].className = "faqClosed";
				if (faqLinks[i].id!="addtlFAQs") {
					getNextNonTextSibling(faqLinks[i].parentNode).className = "displayOff";
					faqLinks[i].onclick = function() {
						toggleFAQ(this,section);
						return false;
					}
				} else {
					faqLinks[i].className = "help";
				}
			}
		}
	}
}

function toggleFAQ(obj,divid) {
	var section = (divid=="topics") ? "topics" : "askUs";
	var faqLinks = document.getElementById(section).getElementsByTagName("a");
	var onOff = (getNextNonTextSibling(obj.parentNode).className=="displayOff") ? "displayOn" : "displayOff";

	for (var i=0;i<faqLinks.length;i++) {
		if ((faqLinks[i].parentNode.nodeName == "DT")&&(faqLinks[i].id!="addtlFAQs")) {
			faqLinks[i].className = "faqClosed";
			getNextNonTextSibling(faqLinks[i].parentNode).className = "displayOff";
		}
	}
	if (onOff=="displayOn") {
		obj.className = "faqOpened";
		faqid = obj.parentNode.id;
		/* SendRequestToServer("ContentTracker.aspx", "ID=" + faqid + "&experienceType=FAQ&zoneDescription=FAQ Zone"); */
	} else {
		obj.className = "faqClosed";
	}
	getNextNonTextSibling(obj.parentNode).className = onOff;
	return false;
}

function toggleTwistie(obj) {
	var twistieParent = getNextParentTag(obj,'div');
	twistieParent.className = "displayOff";
	((obj.className == "twistie_closed")||(obj.className == "twistie_closedInt")) ? getNextNonTextSibling(twistieParent).className = "displayOn" : getPreviousNonTextSibling(twistieParent).className = "displayOn";
}

function getNextNonTextSibling(nodeObj) {
	curNode = nodeObj.nextSibling;
	while(curNode.nodeName == "#text") {
		curNode = curNode.nextSibling;
	}

	return curNode;
}
function getPreviousNonTextSibling(nodeObj) {
	curNode = nodeObj.previousSibling;
	while(curNode.nodeName == "#text") {
		curNode = curNode.previousSibling;
	}

	return curNode;
}

function attachToggles() {
	dtArray = document.getElementsByTagName('dt');

	for (var i=0;i<dtArray.length;i++) {
		obj = dtArray[i];
		if (obj.className=="active") {
			getNextNonTextSibling(obj).className = "displayOn";
			obj.firstChild.onclick=function() {toggleView(this);return false;};
		} else if (obj.className=="inactive") {
			getNextNonTextSibling(obj).className = "displayOff";
			obj.firstChild.onclick=function() {toggleView(this);return false;};
		}
	}
}

function toggleView(obj) {
	obj = obj.parentNode;
	if (obj.className=="active") {
		obj.className = "inactive";
		getNextNonTextSibling(obj).className = "displayOff";
	} else {
		obj.className = "active";
		getNextNonTextSibling(obj).className = "displayOn";	
	}
}

function initRelLinks() {
	var links = document.getElementsByTagName("a");
	var relArr = new Array();
	for (var i=0;i<links.length;i++) {
		var linkrel = links[i].rel;
		if (linkrel!="") {
			relArr = links[i].rel.split(" ");
			if (relArr[0].substring(0,7)=="twistie") {
				links[i].twistieSuffix = "";
				if (relArr[0].length!=7) links[i].twistieSuffix = relArr[0].substring(7);
				links[i].className="twistie" + links[i].twistieSuffix + "_" + relArr[1];
				links[i].targetNode = (relArr.length>2) ? relArr[2] : "";
				links[i].onclick=function() {toggleNewTwistie(this);return false;};
				obj = (links[i].targetNode=="") ? getNextNonTextSibling(links[i]) : document.getElementById(relArr[2]);
				obj.className = (relArr[1]=="closed") ? "displayOff" : "displayOn";
			} else if (relArr[0]=="popup") {
				links[i].winName=relArr[2];
				if (relArr[2]=="help") {
					links[i].className = "help";
					links[i].title = links[i].innerHTML.replace("&amp;","&") + " opens in a new window";
				}
				switch(relArr[1]) {
					case "standard":
						links[i].popWidth=relArr[3];
						links[i].popHeight=relArr[4];
						links[i].onclick=function() {openPop(this.href, this.winName, this.popWidth, this.popHeight);return false;};
						break;
					case "overlay":
						if (relArr.length>2) {
							links[i].popWidth=relArr[3];
							links[i].onclick=function() {openCBMW(this.winName,this.popWidth); return false;};
						} else {
							links[i].onclick=function() {openCBMW(this.winName); return false;};
						}
						break;
				}
			}
		}
	}
}
function toggleNewTwistie(obj) {
	var closedClass = "twistie"+obj.twistieSuffix+"_closed";
	var openedClass = "twistie"+obj.twistieSuffix+"_opened";

	toggleObj = (obj.targetNode=="") ? getNextNonTextSibling(obj) : document.getElementById(obj.targetNode);
	toggleObj.className = (obj.className==closedClass) ? "displayOn" : "displayOff";
	obj.className = (obj.className==closedClass) ? openedClass : closedClass;
}
function openPop(dest, name, width, height) {
	var popup = window.open(dest, name, "toolbar=0, scrollbars=1, location=0, menubar=1, resizable=1, width="+width+", height="+height+", left=120, top=100");
	popup.focus();
}


function rowStripe(tableId) {
	var rows = document.getElementById(tableId).getElementsByTagName("tr");
	for (var i=0;i<rows.length;i++) {
		if (i%2 == 1) rows[i].className = "even";
	}
}

function contentLog(contentId,experienceType,zoneDescription) {
	if (document.getElementById(contentId)!=null) {
		SendRequestToServer("ContentTracker.aspx", "ID=" + contentId + "&experienceType=" + experienceType + "&zoneDescription=" + zoneDescription + "");     
	}
}
function loadGMap() {
	var map = new GMap(document.getElementById("displayGMap"));
	map.addControl(new GSmallMapControl());

	map.setCenter(new GLatLng(0,0),0);
	var bounds = new GLatLngBounds();

	for (var i=0;i<arguments.length;i++) {
		ptArr = arguments[i];
		lat = ptArr[0];
		lon = ptArr[1];
		info = ptArr[2];

		var point = new GLatLng(lat,lon);
		map.addOverlay(createMarker(point,info));
		bounds.extend(point);
	}

	map.setZoom(map.getBoundsZoomLevel(bounds)-2);
	map.setCenter(bounds.getCenter());
}

function createMarker(point, info) {
	var marker = new GMarker(point);
	GEvent.addListener(marker, "click", function() { marker.openInfoWindowHtml(info); });
	return marker;
}

function switchOnOff() {
	var dispOnClass = 'displayOn';
	for(var i=0; i<arguments.length; i++) {
		if (typeof(arguments[i])=='boolean') {
			var displayClass = (arguments[i]) ? dispOnClass : 'displayOff';
		} else {
			if (i==0) {
				dispOnClass = arguments[i];
			} else {
				document.getElementById(arguments[i]).className = displayClass;
			}
		}
	}
}


function openGMZMsg(obj) {
	var msgs = document.getElementById('globalMessageExpanded').getElementsByTagName('DIV');
	for (var i=0;i<msgs.length;i++) msgs[i].className = "displayOff";
	msgs[obj.innerHTML-1].className = "displayOn";
	var msglist = document.getElementById('msgList').getElementsByTagName('LI');
	for (var i=0;i<msglist.length;i++) msglist[i].className="";
	obj.parentNode.className="activeMessage";
}

function toggleMessages(obj, suffix) {
	if (suffix == null) suffix = "";
	var displayClass = (obj.innerHTML=="Collapse") ? "displayOn":"displayOff";

	obj.innerHTML = (obj.innerHTML=="Expand") ? "Collapse":"Expand";
	var msgs = document.getElementById("globalMessageContent"+suffix).getElementsByTagName('div');
	for (var i=0;i<msgs.length;i++) msgs[i].className = displayClass;
		msgs[document.getElementById("globalMessageContent"+suffix).className-1].className = "displayOn";
}

function openMZMsg(obj) {
	//use this
	var msgs = document.getElementById("globalMessageContent").getElementsByTagName('div');
	for (var i=0;i<msgs.length;i++) msgs[i].className = "displayOff";
	msgs[obj.innerHTML].className = "displayOn";
	var msgLinks = document.getElementById("msgList").getElementsByTagName('li');
	for (var i=0;i<msgLinks.length;i++) msgLinks[i].childNodes[0].className = "";
	obj.className = "activeMessage";
	document.getElementById('showHideGMZ').innerHTML = "Expand";
}

function toggleMZ(obj) {
	//use this
	var msgs = document.getElementById("globalMessageContent").getElementsByTagName('div');
	var genericMsg = document.getElementById("globalMessageContent").getElementsByTagName('div')[0];
	var msgClass = (obj.innerHTML=="Expand") ? "displayOn" : "displayOff";
	for (var i=0;i<msgs.length;i++) msgs[i].className = msgClass;
	genericMsg.className = (obj.innerHTML=="Expand") ? "displayOff" : "displayOn";
	var msgLinks = document.getElementById("msgList").getElementsByTagName('li');
	for (var i=0;i<msgLinks.length;i++) msgLinks[i].childNodes[0].className = "";
	obj.innerHTML = (obj.innerHTML=='Expand') ? 'Collapse' : 'Expand';
}

//addEvent(window,"load",setFocus,true);
addEvent(window,"load",initRelLinks,true);
addEvent(window,"load",initFAQ,true);

//Function   : ShowHideDiv
//Description: This function flexes (Hides/Shows) form elements on the ContactUs page depending upon the contents of
//			   the following two hidden variables:
//				controlFieldXML		- Used to flex input controls like state Driver's License Number etc
//				questionAnswerXML   - Used to flex the already answered Questions and Answers for various topics.
//
//Sample for the contents of controlFieldXML
//------------------------------------------
//"directChangeSubject,licenseNumberTR|directPersonalSubject,licenseNumberTR|directMovedSubject,licenseNumberTR|directCancelSubject,licenseNumberTR|directClaimsSubject,licenseNumberTR|driveChangeSubject,licenseNumberTR|directClaimsSubject,policyNumberTR,streetAddressTR,cityTR,zipcodeTR|driveClaimsSubject,policyNumberTR,streetAddressTR,cityTR,stateTR,zipcodeTR,DOBTR";
//	
//Sample for the contents of questionAnswerXML
//--------------------------------------------
//<Questions>
//	<QuestionCollection TopicID="driveChangeSubject">
//		<Question TXT="How do I change my email address?">
//			<![CDATA[On the left side of your policy Home Page, click on &quot;Update User Profile.&quot;  Select the &quot;Update Email Address&quot; link and you will be instructed to provide your new email address.&lt;br/&gt;&lt;br/&gt;Already tried it online and could not finish your change? To adjust the form below for this specific request, &lt;U&gt;&lt;A HREF=&quot;asfunction:changeForm,6&quot; &gt;click here.&lt;/A&gt;&lt;/U&gt;]]>
//		</Question>
//		<Question TXT="How do I change my user ID and password?">
//			<![CDATA[Click on &quot;Update User Profile&quot; on the left side of your policy home page, on the next page click on the &quot;Update User ID/Password&quot; link. You will be instructed on how to change your user ID and password or &lt;U&gt;&lt;a href='/interact-cgi/chgid.asp?CPN=LTQ00MEN'&gt;click here&lt;/a&gt;&lt;/U&gt;.]]>
//		</Question>
//	</QuestionCollection>
//	<QuestionCollection TopicID="directChangeSubject">
//		<Question TXT="A violation just came off of my policy. Will my premium decrease?">
//			<![CDATA[The amount of time that a violation stays on your driving record in most states is 36 months. If an accident/violation expires during your policy period, the policy premium will reflect this change at the next renewal. Contact Customer Service to find out the specific range of dates when the change will occur.]]>
//		</Question>
//	</QuestionCollection>
//</Questions>

var strLastShownDiv = "";

function ShowHideDiv()
{
	var strSelectedContactUsSubject = "";
	
	if(document.getElementById("selectedContactUsDriveSubject"))
	{
		strSelectedContactUsSubject = document.getElementById("selectedContactUsDriveSubject").value;
	}
	else if(document.getElementById("selectedContactUsDirectSubject"))
	{
		strSelectedContactUsSubject = document.getElementById("selectedContactUsDirectSubject").value;
	}
	
	//Hide all the Conditional Controls.
	switchOnOff(false, "licenseNumberTR", "policyNumberTR", "streetAddressTR", "cityTR", "stateTR", "zipcodeTR", "garageStreetAddressTR", "garageCityTR", "garageStateTR", "garageZipcodeTR", "questionsAnsweredMainDiv", "DOBTR", "confirmEmailAddressTR", "newMailingAddressLabel", "newGarageAddressLabel", "phoneNumberTR");
	
	//Hide the last shown QuestionsAnswered Divs.
	if(strLastShownDiv != "")
		document.getElementById(strLastShownDiv).className = "backgroundColor3 questionsAnsweredDivClass displayOff";
	
	ChangeForm(strSelectedContactUsSubject, true);
	
	if((document.getElementById(strSelectedContactUsSubject + "Div")) && (strSelectedContactUsSubject != ""))
	{
		switchOnOff(true, "questionsAnsweredMainDiv");
		document.getElementById(strSelectedContactUsSubject + "Div").className = "backgroundColor3 questionsAnsweredDivClass displayOn";
		strLastShownDiv = strSelectedContactUsSubject + "Div";
	}
}

function ChangeForm()
{
	var changeID = arguments[0];
	
	if(arguments.length == 1)
	{
		document.getElementById("additionalControlsForSubject").value = changeID;

	}
	
	var strFieldRule = document.getElementById("controlFieldPipe").value;
	
	//Parse Control Field Info.
	var arrTopicInfo = strFieldRule.split("|");
	
	for(var i = 0; i < arrTopicInfo.length; i++)
	{
		var arrFieldInfo = arrTopicInfo[i].split(",");
		var strCurrentSubject = arrFieldInfo[0];
		
		if(strCurrentSubject == changeID)
		{
			//Show the related Filed Controls.
			for(var j = 1; j < arrFieldInfo.length; j++)
			{
				switchOnOff(true, arrFieldInfo[j]);				
			}
		}
	}
}

function trim(str) {
	return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}

/* Toggles between tabs on the OLS home page */

function showHidePolicyTerm(type) {
	if (type == "current") {
		document.getElementById('policyInformation').className='displayOn';
		document.getElementById('policyActivity').className='displayOff';

		document.getElementById('policyInformationTab').className='displayOn';
		document.getElementById('policyActivityTab').className='displayOff';
	}
	if (type == "renewal") {
		document.getElementById('policyInformation').className='displayOff';
		document.getElementById('policyActivity').className='displayOn';

		document.getElementById('policyInformationTab').className='displayOff';
		document.getElementById('policyActivityTab').className='displayOn';
	}
}

function showHideConsole(type) {
	if (type == "policySummaryConsole") {
		document.getElementById('policyInformation').className='displayOn';
		document.getElementById('policyActivity').className='displayOff';

		document.getElementById('policyInformationTab').className='displayOn';
		document.getElementById('policyActivityTab').className='displayOff';
	}
	if (type == "recentPolicyActivityConsole") {
		document.getElementById('policyInformation').className='displayOff';
		document.getElementById('policyActivity').className='displayOn';

		document.getElementById('policyInformationTab').className='displayOff';
		document.getElementById('policyActivityTab').className='displayOn';
	}
}

function showHideConsoleTable(type) {
	if (type == "console1") {
		document.getElementById('consoleOneTable').className='displayOn';
		document.getElementById('consoleTwoTable').className='displayOff';

		document.getElementById('consoleOneTab').className='displayOn';
		document.getElementById('consoleTwoTab').className='displayOff';
	}
	if (type == "console2") {
		document.getElementById('consoleOneTable').className='displayOff';
		document.getElementById('consoleTwoTable').className='displayOn';

		document.getElementById('consoleOneTab').className='displayOff';
		document.getElementById('consoleTwoTab').className='displayOn';
	}
}

function showHideCommonQuestions(type) {
	if (type == "commonQuestions1") {
		document.getElementById('commonQuestionsOne').className='displayOn';
		document.getElementById('commonQuestionsTwo').className='displayOff';
	}
	if (type == "commonQuestions2") {
		document.getElementById('commonQuestionsOne').className='displayOff';
		document.getElementById('commonQuestionsTwo').className='displayOn';
	}
}

function CreateBookmarkLink() {
	var title = "Progressive Online Customer Service";
	if (document.location.href.indexOf("agent")>-1) {
		var url = "https://www.progressiveagent.com/manage-your-policy.aspx";
	} else {
		var url = "https://www.progressive.com/online-customer-service/";
	}

	if (window.sidebar) { 	
		window.sidebar.addPanel(title,url,"");
	} else if (window.external) { 	
		window.external.AddFavorite(url,title);
	} else if (window.opera && window.print) {
		return true;
	}
}

addEvent(window, 'load', function() { if ((document.getElementById('actionZone') != null) && (document.getElementById('actionZone').innerHTML == '')) document.getElementById('actionZone').className = 'displayOff'; }, true);

function handleLinkClick(e) {
    var source;
    if (!e) source = event.srcElement;
    else {
        if (!e.target) e.target = event.srcElement || document;
        source = e.target;
    }
    while (source != null && source.tagName != "A") {
        source = source.parentNode;
    }
    if (source == null) return;
    var newLocation = source.getAttribute("href");
    try {
        if (newLocation == null || newLocation.indexOf("javascript:") == 0 || newLocation.indexOf("#") >= 0) {
            return;
        }
        var linktext = source.getAttribute("name");
        if (linktext == null || linktext.length == 0) {
            var textElement = source.parentNode.nodeName == "DIV" ? source : source.parentNode;
            if (!textElement.innerText) linktext = textElement.textContent;
            else linktext = textElement.innerText;
        }
        if (linktext.length > 150) linktext = linktext.substring(0, 150);
        var containerId = getContanerId(source, "DIV");

        setCookie("linkZone", containerId, 2, "/");
        setCookie("linkText", linktext, 2, "/");
    }
    catch (e) {
        setCookie("linkZone", "error", 2, "/");
        setCookie("linkText", e, 2, "/");
    }

}
function setCookie(name, value, expiresSeconds, path, domain, secure) {
    var expires = new Date();
    if ((expiresSeconds)) {
        expires.setTime(expires.getTime() + 1000 * expiresSeconds);
    }
    document.cookie = name + "=" + escape(value) +
    	((expiresSeconds) ? "; expires=" + expires : "") +
        ((path) ? "; path=" + path : "") +
        ((domain) ? "; domain=" + domain : "") +
        ((secure) ? "; secure" : "");
}
function getContanerId(element, containerTagName) {
    var retval = "";
    while (element != null)
    {
        if (element.tagName == containerTagName && element.id != null && element.id.length>0) {
            retval = element.id + "." + retval;
        }
        element = element.parentNode;
    }
    return retval;
}

addEvent(document, "click", handleLinkClick, true);

//document.onclick = handleLinkClick;

// News Scroller for OLS Home Page

		//Begin newsreader story-switching code
		var currentStory = 1;
		var timeOutID;
 
		function switchNewsStory(storyNumber)
		{
			try
			{
				clearTimeout(timeOutID);
 
				var previousStory = currentStory;
				if(storyNumber!=null)
					currentStory = storyNumber;
				else
				{
					if(currentStory==5)
						currentStory = 1;
					else
						++currentStory;
				}
				
				var prevNewsLink = document.getElementById('newsStoryLink'+previousStory);
				var prevNewsStory = document.getElementById('newsStory'+previousStory);
				var curNewsLink = document.getElementById('newsStoryLink'+currentStory);
				var curNewsStory = document.getElementById('newsStory'+currentStory);
				
				prevNewsLink.enabled = true;
				prevNewsLink.className = 'unSelected';
				prevNewsStory.style.display = 'none';
				curNewsLink.enabled = false;
				curNewsLink.className = 'selected';
				curNewsStory.style.display = 'block';
								
				timeOutID = setTimeout('switchNewsStory()', 5000);
			}
			catch(err) {}
		}

//end newsreader code.

// begin print preview functionality

function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
    window.onload = func;
  } else {
    window.onload = function() {
      if (oldonload) {
        oldonload();
      }
      func();
    }
  }
}

function print_preview() {
	// Switch the stylesheet
	setActiveStyleSheet();
	
	// Create preview message
    add_preview_message();

	// Print the page
	window.print();
}

function add_preview_message(){
var main_content = document.getElementById('header');
var main_body = main_content.parentNode;

	if (document.getElementById){
		
		var preview_message = document.createElement('div');
		preview_message.id = 'preview-message';
	
		// Create Heading
		var preview_header = document.createElement('h3');
		var preview_header_text = document.createTextNode('This is a print preview of this page.');
		preview_header.appendChild(preview_header_text);
		
		// Create paragraph
		var preview_para = document.createElement('p');
		var preview_para_text = document.createTextNode('');
		
		var cancel_function_link = document.createElement('a');
			cancel_function_link.onclick = function(){ cancel_print_preview(); return false; };
			cancel_function_link.setAttribute('href', '#');	
		var cancel_function_link_text = document.createTextNode('Return to the regular version of the page.');
		cancel_function_link.appendChild(cancel_function_link_text);
		preview_para.appendChild(preview_para_text); //
		preview_para.appendChild(cancel_function_link);
		
		// Put it all togeether
		preview_message.appendChild(preview_header); 
		preview_message.appendChild(preview_para);
		main_body.insertBefore(preview_message, main_content);

	}
}

function cancel_print_preview() {
	// Destroy the preview message
	var print_preview = document.getElementById('preview-message');
	var main_body = print_preview.parentNode;
	main_body.removeChild(print_preview);
	
	// Switch back stylesheet
	setDefaultStyleSheet();
}


function setActiveStyleSheet(){  // select the stylesheet
   var i, a;
   for(i=0; (a = document.getElementsByTagName("link")[i]); i++) {
     if (a.getAttribute("media") == "screen") {
       	//document.getElementsByTagName("link").style.display="none";
		a.disabled = true;
	}

	var b = document.getElementById("printStylesheet");
		b.setAttribute('media','all');
		b.disabled = false;
}
}

function setDefaultStyleSheet(){  // select the stylesheet
   var i, a;
   for(i=0; (a = document.getElementsByTagName("link")[i]); i++) {
     if (a.getAttribute("media") == "screen") {
       	//document.getElementsByTagName("link").style.display="none";
		a.disabled = false;
	}

	var b = document.getElementById("printStylesheet");
		b.setAttribute('media','print');
		b.disabled = true;
}
}

// end print preview functionality

/* Responsive Rebrand New Functions below this line */
/* ================================================ */

jQuery(document).ready(function () {


    /* replace primary navigation labels */

    jQuery('#homeTab').text('Your Policies');
    jQuery('#customersummaryTab').text('Your Policies');
    jQuery('#homeTab').prop('title', 'View a summary of all your policies and select a policy to service');
    jQuery('#customersummaryTab').prop('title', 'View a summary of all your policies select a policy to service');
    jQuery('#agentTab').text('Your Agent');
    jQuery('#policyTab').text('Policy Details');
    jQuery('#billingTab').text('Payments');
    jQuery('#discountsTab').text('Discounts');
    jQuery('#benefitsTab').text('Discounts');

    /* class body tag*/
    /* class non-logged and logged-in body tag in OLS pages leveraging the presence of #security */
    if (jQuery('div#header ul#housekeeping li span#security').length) { // implies *not* zero, it exists!
        jQuery('body').addClass('nonLoggedInPage');
    } else {
        jQuery('body').addClass('loggedInPage');
    }

    /* class non-logged and logged-in body tag in OLS pages leveraging the presence of #chat */
    if (jQuery('ul#housekeeping li span#nonloggedinchat').length) { // implies *not* zero, it exists!
        jQuery('body').addClass('nonLoggedInPage'); 
    } else {
        jQuery('body').addClass('loggedInPage');
    }
    /* class agency body tag in OLS pages through #agentTab */
    if (jQuery('ul#primary li a#agentTab').length) {
        jQuery('body').addClass('agencyPage');
    } else {
        jQuery('body').addClass('nonAgencyPage');
    }
    /* class internals body tag in OLS pages through #header.internal */
    if (jQuery('#header.internal').length) {
        jQuery('body').addClass('internalView');
    }
    /* class FAO body tag in OLS pages through #FAOheaderContainer */
    if (jQuery('#FAOheaderContainer').length) {
        jQuery('body').addClass('FAO');
    }
    /* class policy summary internals body tag in OLS pages */
    if (jQuery("#divB .polSumH1 h1").html() == "Policy Summary") {
        if (jQuery('#header .internal').length) {
            jQuery('body').addClass('internalPolicySummary');
        } else {
            if (jQuery('#FAOheaderContainer').length) {
                jQuery('body').addClass('FAOPolicySummary');
            } else {
                jQuery('body').addClass('policySummary');
            }
        }
    }

    /* Fix visibility issues with the styled term box on Policy Summary */
    if (jQuery('#termBox').children().length == 0) {
        jQuery('#termBox').hide();
    }

    /* Add mobile navigation to OLS page headers */
    jQuery('body').addClass("menuHidden");
    jQuery('#gripper').click(function () {
        jQuery('body').toggleClass("menuShowing").toggleClass("menuHidden");
    });

    /* Add shade when navigation is exposed */
    jQuery("body").append("<div id='shade'></div>");
    jQuery('#shade').click(function () {
        /*var currentposition = jQuery(window).scrollTop();*/
        jQuery('body').toggleClass("menuShowing").toggleClass("menuHidden");
        /*var primaryheight = (jQuery('#primary').height()-19);
        jQuery(window).scrollTop(currentposition-primaryheight);*/
    });

    /* id & clean up housekeeping items */

    if (!jQuery('body').hasClass('nonLoggedInPage')) {

        jQuery("#housekeeping li a").each(function () {
            var hktext = trim(jQuery(this).text());
            if (hktext == 'Your Profile') {
                jQuery(this).parent('li').addClass('editProfile');
            } else if (hktext == 'Chat'){
                jQuery(this).parent('li').addClass('chat');
            } else if (hktext == 'FAQs') {
                jQuery(this).parent('li').addClass('FAQs');
            } else if (hktext == 'Contact Us') {
                jQuery(this).parent('li').addClass('contactUs');
            } else if (hktext == 'Log Out') {
                jQuery(this).parent('li').addClass('logOut');
            } else if (hktext == 'Guidelines') {
                jQuery(this).parent('li').addClass('internal Guidelines');
            } else if (hktext == 'Policy Notes') {
                jQuery(this).parent('li').addClass('internal policyNotes');
            } else if (hktext == 'Close') {
                jQuery(this).parent('li').addClass('internal close');
            } else {
                jQuery(this).parent('li').addClass('miscHKItem');
            }
        });

        /*internal users are seeing broken headers on medium sized screens when policystatus is too long, adding ellipsis for medium sized screens and removing unnecessary text'Status:' */
        jQuery('#bubble li.internal').each(function () {
            jQuery('#bubble li.internal span.jumpHelp').replaceWith('');
            var polStatusText = trim(jQuery(this).text());
            jQuery(this).html("<span class='truncatePolicyStatus' title='" + polStatusText + "'>" + polStatusText + "</span>");
        });
    }

    /*Button-up Policy Summary but not for Internal Users*/

    if (!jQuery('body').hasClass('internalPolicySummary')) {
        if (!jQuery('body').hasClass('FAO')) {

            jQuery('#polSumContact h2, #polSumPolicy h2, #polSumDrivers h2, #polSumVehicles h2, #polSumSurchgMunicipality h2, #polSumCoverages > h2, #polSumSurcharges h2').siblings().hide();
            jQuery('#polSumDocumentDeliveryMethod h2').siblings().hide();
            jQuery('#polSumDocumentDeliveryMethod h2').parent().siblings().hide();
            jQuery('#polSumDiscounts h2').siblings().hide();
            jQuery('#polSumDiscounts h2').parent().parent().parent().parent().siblings().hide();
            jQuery('#polSumNewBusinessDocuments h2, #polSumCessionAndCTR h2').siblings().hide();
            jQuery('#polSumNewBusinessDocuments h2, #polSumCessionAndCTR h2').parent().siblings().hide();

            jQuery('#polSumContact h2, #polSumPolicy h2, #polSumDrivers h2, #polSumVehicles h2, #polSumSurchgMunicipality h2, #polSumCoverages > h2, #polSumSurcharges h2').addClass('expander');
            jQuery('#polSumDocumentDeliveryMethod h2').addClass('expander');
            jQuery('#polSumDiscounts h2').addClass('expander');
            jQuery('#polSumNewBusinessDocuments h2, #polSumCessionAndCTR h2').addClass('expander');

            jQuery('#polSumContact h2, #polSumPolicy h2, #polSumDrivers h2, #polSumVehicles h2, #polSumSurchgMunicipality h2, #polSumCoverages > h2, #polSumSurcharges h2').click(function () {
                jQuery(this).siblings().toggle("fast");
                jQuery(this).toggleClass('toggled');
            });

            jQuery('#polSumDocumentDeliveryMethod h2').click(function () {
                jQuery(this).siblings().toggle("fast");
                jQuery(this).parent().siblings().toggle();
                jQuery(this).toggleClass('toggled');
            });

            jQuery('#polSumDiscounts h2').click(function () {
                jQuery(this).siblings().toggle("fast");
                jQuery(this).parent().parent().parent().parent().siblings().toggle();
                jQuery(this).toggleClass('toggled');
            });

            jQuery('#polSumNewBusinessDocuments h2, #polSumCessionAndCTR h2').click(function() {
                jQuery(this).siblings().toggle("fast");
                jQuery(this).parent().siblings().toggle("fast");
                jQuery(this).toggleClass('toggled');
            });

        }
    }

    if (jQuery('#top_error').is(':empty')) {
        jQuery('#top_error').hide();
    }
    else {
        jQuery('#top_error').show();
    }

    jQuery('iframe').load(function () {
        jQuery('#acknowledgeScroll').click(function () {
            jQuery('iframe').height(jQuery('iframe').contents().height());
            jQuery('html, body').animate({ scrollTop: jQuery('.legal').offset().top }, 7500);
        });
        jQuery('#signatureScroll').click(function () {
            jQuery('iframe').height(jQuery('iframe').contents().height());
            jQuery('html, body').animate({ scrollTop: jQuery('.legal').offset().top }, 7500);
        });
    });

});
